---
alwaysApply: true
---

## Важные инструкции

Задача считается выполненной, если ты проверил ошибки и исправил их все.

При добавление и изменение новой функциональности анализируй существующие компоненты и старайся их переиспользовать.

Если ИИ-агент вносит изменения в функциональность проекта, он должен убедиться, что эта фукнциональность покрыта тестами. Если это не так, он должен написать тесты для проверки этой фукнциональности.

Не забывай обновлять это файл при создание новых версий.

## 🚨 КРИТИЧЕСКИ ВАЖНО: Запуск приложения

⚠️ **ВНИМАНИЕ!** ⚠️

Приложение должно запускаться **ТОЛЬКО** из директории `mvalovpokertracker`, а **НЕ** из корневой директории проекта!

### Почему это важно:
- В директории `mvalovpokertracker` находятся `.env.local` и другие конфигурации
- Запуск из корневой директории приводит к ошибкам 404 для CSS и JavaScript
- Next.js не найдет правильные пути к статическим файлам

### Правильная команда запуска:
```bash
cd /Users/mvalov/PokerTracker/mvalovpokertracker && npm run dev
```

Или короткая версия:
```bash
cd mvalovpokertracker && npm run dev
```

### ❌ НЕПРАВИЛЬНО:
```bash
cd /Users/mvalov/PokerTracker && npm run dev  # ❌ Приведет к ошибкам!
```

## 🏗️ Архитектура проекта

### Общая архитектура

```
┌─────────────────┐
│   User/Client   │
│  (Web Browser)  │
└────────┬────────┘
         │
         │ HTTPS
         ▼
┌─────────────────┐      ┌──────────────────┐
│   Next.js App   │◄────►│  Telegram Bot    │
│   (Vercel)      │      │  (Polling/Webhook)│
└────────┬────────┘      └─────────┬────────┘
         │                          │
         │ API Calls                │ Commands
         ▼                          ▼
┌─────────────────────────────────────────┐
│           Supabase Backend              │
│  ┌─────────┬─────────┬─────────────┐   │
│  │   Auth  │ Storage │  PostgreSQL │   │
│  │         │  (S3)   │     (RLS)   │   │
│  └─────────┴─────────┴─────────────┘   │
└─────────────────────────────────────────┘
```

### Паттерны и принципы
- **App Router** - Использование Next.js 15 App Router для маршрутизации
- **Server Components** - Максимальное использование RSC для оптимизации
- **Client Components** - Для интерактивных элементов с state
- **API Routes** - RESTful API endpoints для взаимодействия с backend
- **Service Layer** - Бизнес-логика вынесена в отдельные сервисы
- **Custom Hooks** - Переиспользуемая логика в React hooks
- **Type Safety** - Полная типизация с TypeScript
- **Component Composition** - Композиция компонентов вместо наследования
- **Component Factory** - Паттерн фабрики для создания переиспользуемых компонентов с общей функциональностью

---

## 📁 Структура директорий

### Корневая структура
```
/Users/mvalov/PokerTracker/
├── .cursor/rules/          # Правила для AI ассистента
│   ├── basic-rules.mdc
│   ├── next-js-guidelines.mdc
│   ├── ui-ux.mdc
│   └── global.mdc (этот файл)
├── docs/                   # Документация проекта
├── migrations/             # Миграции базы данных
├── mvalovpokertracker/    # Резервная копия старой версии
├── node_modules/          # Зависимости npm
├── public/                # Статические файлы
├── scripts/               # Bash скрипты для деплоя/утилит
├── sql-scripts/           # SQL скрипты для Supabase
├── src/                   # Исходный код приложения
├── biome.json             # Конфигурация Biome (линтер)
├── jest.config.js         # Конфигурация Jest
├── jest.setup.js          # Настройка тестового окружения
├── next.config.ts         # Конфигурация Next.js
├── next-env.d.ts          # TypeScript типы Next.js
├── package.json           # Зависимости и скрипты
├── postcss.config.js      # PostCSS конфигурация
├── tailwind.config.js     # Tailwind CSS конфигурация
├── tsconfig.json          # TypeScript конфигурация
├── PROJECT_REQUIREMENTS.md # Требования проекта
└── README.md              # Документация проекта
```

### Структура `/src` директории

```
src/
├── __tests__/                     # Все тесты приложения
│   ├── api/                       # Тесты API routes
│   ├── bot/                       # Тесты Telegram бота
│   ├── components/                # Тесты компонентов
│   ├── hooks/                     # Тесты хуков
│   ├── integration/               # Интеграционные тесты
│   ├── lib/                       # Тесты утилит
│   ├── mocks/                     # Моки для тестов
│   ├── performance/               # Тесты производительности
│   ├── services/                  # Тесты сервисов
│   └── utils/                     # Тесты утилит
│
├── app/                           # Next.js App Router
│   ├── admin/                     # Админ панель
│   │   ├── bot-setup/             # Настройка Telegram бота
│   │   └── page.tsx               # Главная страница админки
│   ├── analytics/                 # Страница аналитики
│   ├── api/                       # API Routes
│   │   ├── admin/                 # Админ API
│   │   │   ├── bot-mode/          # Управление режимом бота
│   │   │   ├── bot-settings/      # Настройки бота
│   │   │   └── env-settings/      # Переменные окружения
│   │   ├── bot/                   # Bot API
│   │   │   ├── cleanup-sessions/  # Очистка сессий
│   │   │   ├── init/              # Инициализация бота
│   │   │   ├── notify/            # Уведомления
│   │   │   ├── polling/           # Polling endpoint
│   │   │   └── webhook/           # Webhook endpoint
│   │   ├── debug/                 # Debug endpoints
│   │   ├── telegram/              # Telegram интеграция
│   │   │   ├── generate-code/     # Генерация кода привязки
│   │   │   ├── link/              # Привязка аккаунта
│   │   │   ├── status/            # Статус бота
│   │   │   ├── unlink/            # Отвязка аккаунта
│   │   │   └── webhook/           # Webhook для Telegram
│   │   └── tournaments/           # Турниры API
│   │       ├── [id]/              # CRUD операции с турниром
│   │       ├── cleanup/           # Очистка данных
│   │       └── route.ts           # Список турниров
│   ├── auth/                      # Страница аутентификации
│   ├── bankroll/                  # Управление банкроллом
│   ├── results/                   # Результаты турниров
│   ├── settings/                  # Настройки пользователя
│   ├── tournaments/               # Управление турнирами
│   │   ├── [id]/                  # Детали турнира
│   │   ├── add/                   # Добавление турнира
│   │   ├── edit/                  # Редактирование турнира
│   │   └── page.tsx               # Список турниров
│   ├── favicon.ico                # Favicon
│   ├── globals.css                # Глобальные стили
│   ├── layout.tsx                 # Root layout
│   └── page.tsx                   # Главная страница (Dashboard)
│
├── bot/                           # Telegram Bot
│   ├── handlers/                  # Обработчики сообщений
│   │   └── photoHandler.ts        # Обработка фото билетов
│   ├── services/                  # Сервисы бота
│   │   └── notificationService.ts # Уведомления через бота
│   ├── commands.ts                # Команды бота
│   ├── config.ts                  # Конфигурация бота
│   ├── index.ts                   # Основной файл бота
│   ├── utils.ts                   # Утилиты бота
│   └── README.md                  # Документация бота
│
├── components/                    # React компоненты
│   ├── admin/                     # Админ компоненты
│   │   └── BotSetup.tsx           # Настройка бота
│   ├── analytics/                 # Компоненты аналитики
│   │   └── AnalyticsCharts.tsx    # Графики аналитики
│   ├── bankroll/                  # Компоненты банкролла
│   │   └── BankrollSummary.tsx    # Сводка банкролла
│   ├── charts/                    # Графики и диаграммы
│   │   ├── BaseChart.tsx          # Базовый компонент для всех графиков
│   │   ├── ProfitChart.tsx        # График прибыли
│   │   ├── ROIChart.tsx           # График ROI
│   │   ├── PositionChart.tsx      # График позиций
│   │   └── utils/                 # Утилиты для графиков
│   │       └── formatting.ts      # Функции форматирования данных
│   ├── ocr/                       # OCR компоненты
│   │   └── OCRScanner.tsx         # Сканер билетов
│   ├── providers/                 # Context providers
│   │   └── AppProviders.tsx       # Провайдеры приложения
│   ├── results/                   # Компоненты результатов
│   │   └── ResultForm.tsx         # Форма результата
│   ├── ui/                        # UI компоненты (shadcn-like)
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   ├── input.tsx
│   │   ├── label.tsx
│   │   ├── select.tsx
│   │   ├── textarea.tsx
│   │   └── ... (другие UI компоненты)
│   └── TelegramIntegration.tsx    # Интеграция с Telegram
│
├── data/                          # Моки и данные
│   └── mockData.ts                # Мок данные для разработки
│
├── hooks/                         # Custom React Hooks
│   ├── useAuth.tsx                # Хук аутентификации
│   └── useTournaments.tsx         # Хук управления турнирами
│
├── lib/                           # Библиотеки и утилиты
│   ├── errorHandler.ts            # Обработка ошибок
│   ├── supabase.ts                # Supabase клиент
│   └── utils.ts                   # Общие утилиты
│
├── services/                      # Бизнес-логика (сервисный слой)
│   ├── authService.ts             # Сервис аутентификации
│   ├── bankrollService.ts         # Сервис банкролла
│   ├── botSessionService.ts       # Сервис сессий бота
│   ├── botSettingsService.ts      # Сервис настроек бота
│   ├── notificationService.ts     # Сервис уведомлений
│   ├── ocrService.ts              # Сервис OCR
│   └── tournamentService.ts       # Сервис турниров
│
└── types/                         # TypeScript типы
    └── index.ts                   # Все типы приложения
```

---

## 🗃️ База данных (Supabase PostgreSQL)

### Основные таблицы

#### `profiles` - Профили пользователей
```sql
- id: UUID (PK, ссылка на auth.users)
- username: VARCHAR(100) UNIQUE
- avatar_url: TEXT
- telegram_id: BIGINT UNIQUE
- preferences: JSONB
- created_at: TIMESTAMP
- updated_at: TIMESTAMP
```

#### `tournaments` - Турниры
```sql
- id: UUID (PK)
- user_id: UUID (FK -> profiles)
- name: VARCHAR(255)
- date: TIMESTAMP
- venue: VARCHAR(255)
- buyin: DECIMAL(10,2)
- tournament_type: VARCHAR(50) (freezeout/rebuy/addon/bounty/satellite)
- structure: VARCHAR(50)
- participants: INTEGER
- prize_pool: DECIMAL(12,2)
- blind_levels: TEXT
- starting_stack: INTEGER
- ticket_image_url: TEXT
- notes: TEXT
- status: VARCHAR(20) (registered/completed/cancelled)
- created_at: TIMESTAMP
- updated_at: TIMESTAMP
```

#### `tournament_results` - Результаты турниров
```sql
- id: UUID (PK)
- tournament_id: UUID (FK -> tournaments, UNIQUE)
- position: INTEGER
- payout: DECIMAL(10,2)
- profit: DECIMAL(10,2) (calculated)
- roi: DECIMAL(8,4) (calculated)
- notes: TEXT
- knockouts: INTEGER
- rebuy_count: INTEGER
- addon_count: INTEGER
- time_eliminated: TIMESTAMP
- final_table_reached: BOOLEAN
- created_at: TIMESTAMP
```

#### `tournament_photos` - Фотографии турниров
```sql
- id: UUID (PK)
- tournament_id: UUID (FK -> tournaments)
- photo_url: TEXT
- photo_type: VARCHAR(20) (ticket/result/general)
- caption: TEXT
- created_at: TIMESTAMP
```

#### `user_settings` - Настройки пользователей
```sql
- id: UUID (PK)
- user_id: UUID (FK -> profiles, UNIQUE)
- currency: VARCHAR(3) (USD/EUR/RUB)
- timezone: VARCHAR(50)
- notifications: JSONB
- privacy: JSONB
- created_at: TIMESTAMP
- updated_at: TIMESTAMP
```

#### `bot_sessions` - Сессии Telegram бота
```sql
- id: UUID (PK)
- telegram_user_id: BIGINT UNIQUE
- user_id: UUID (FK -> profiles)
- session_data: JSONB
- current_action: VARCHAR(50)
- last_activity: TIMESTAMP
- created_at: TIMESTAMP
- expires_at: TIMESTAMP
```

#### `bot_settings` - Настройки бота
```sql
- id: UUID (PK)
- key: VARCHAR(100) UNIQUE
- value: TEXT
- description: TEXT
- updated_at: TIMESTAMP
```

#### `bankroll_transactions` - Транзакции банкролла
```sql
- id: UUID (PK)
- user_id: UUID (FK -> profiles)
- type: VARCHAR(50) (deposit/withdrawal/tournament_buyin/tournament_payout/adjustment)
- amount: DECIMAL(10,2)
- description: TEXT
- date: TIMESTAMP
- tournament_id: UUID (FK -> tournaments, nullable)
- category: VARCHAR(50)
- created_at: TIMESTAMP
```

### Индексы
```sql
- idx_tournaments_user_id (user_id)
- idx_tournaments_date (date)
- idx_tournament_results_tournament_id (tournament_id)
- idx_profiles_telegram_id (telegram_id)
- idx_bot_sessions_telegram_user_id (telegram_user_id)
- idx_bankroll_transactions_user_id (user_id)
```

### Row Level Security (RLS)
Включен на всех таблицах для обеспечения безопасности:
- Пользователи видят только свои данные
- Все операции проверяются через `auth.uid()`

---

## 🔌 API Routes

### Admin API (`/api/admin`)
- `POST /api/admin/bot-mode` - Изменение режима работы бота (polling/webhook)
- `GET/PUT /api/admin/bot-settings` - Управление настройками бота
- `GET /api/admin/env-settings` - Получение настроек окружения

### Bot API (`/api/bot`)
- `POST /api/bot/init` - Инициализация бота
- `POST /api/bot/cleanup-sessions` - Очистка устаревших сессий
- `POST /api/bot/notify` - Отправка уведомлений через бота
- `POST /api/bot/polling` - Polling endpoint (для опроса Telegram)
- `POST /api/bot/webhook` - Webhook endpoint (для получения обновлений)

### Telegram API (`/api/telegram`)
- `POST /api/telegram/generate-code` - Генерация кода привязки Telegram
- `POST /api/telegram/link` - Привязка Telegram аккаунта
- `GET /api/telegram/status` - Статус бота
- `POST /api/telegram/unlink` - Отвязка Telegram аккаунта
- `POST /api/telegram/webhook` - Telegram webhook (альтернативный)

### Tournaments API (`/api/tournaments`)
- `GET /api/tournaments` - Получение списка турниров
- `POST /api/tournaments` - Создание турнира
- `GET /api/tournaments/[id]` - Получение турнира
- `PUT /api/tournaments/[id]` - Обновление турнира
- `DELETE /api/tournaments/[id]` - Удаление турнира
- `POST /api/tournaments/cleanup` - Очистка данных

### Debug API (`/api/debug`)
- `GET /api/debug/version` - Версия приложения и окружения

---

## 🤖 Telegram Bot архитектура

### Команды бота
- `/start` - Начало работы, привязка аккаунта
- `/help` - Справка по командам
- `/link` - Привязка Telegram к веб-аккаунту
- `/register` - Ручная регистрация турнира
- `/result` - Добавление результата турнира
- `/stats` - Просмотр статистики
- `/tournaments` - Список турниров
- `/settings` - Настройки
- `/venue` - Просмотр текущей площадки
- `/setvenue` - Установка текущей площадки

### Режимы работы
1. **Polling Mode** (по умолчанию)
   - Бот периодически опрашивает Telegram API
   - Подходит для разработки и локального тестирования
   - Конфигурируется через `BOT_MODE=polling`

2. **Webhook Mode**
   - Telegram отправляет обновления на webhook URL
   - Подходит для production
   - Требует публичный HTTPS endpoint
   - Конфигурируется через `BOT_MODE=webhook`

### OCR обработка
1. Пользователь отправляет фото билета
2. Бот загружает изображение
3. Сохранение в Supabase Storage
4. OCR обработка (планируется Tesseract.js)
5. Извлечение данных турнира
6. Подтверждение данных пользователем
7. Сохранение в базу данных

---

## 📦 Ключевые файлы и их назначение

### Конфигурационные файлы

#### `next.config.ts`
Конфигурация Next.js приложения:
- Настройки сборки
- Переменные окружения
- Redirects/rewrites
- Image optimization

#### `tailwind.config.js`
Конфигурация Tailwind CSS:
- Цветовая палитра
- Кастомные утилиты
- Плагины
- Theme customization

#### `biome.json`
Конфигурация Biome (линтер + форматтер):
- Правила линтинга
- Настройки форматирования
- Игнорируемые файлы

#### `tsconfig.json`
Конфигурация TypeScript:
- Compiler options
- Path aliases (`@/` -> `src/`)
- Strict mode включен

#### `jest.config.js` & `jest.setup.js`
Конфигурация тестового окружения:
- Test environment: jsdom
- Coverage настройки
- Setup файлы
- Моки для Supabase

### Основные файлы приложения

#### `src/app/layout.tsx`
Root layout приложения:
- Metadata для SEO
- Fonts (Inter)
- AppProviders (React Query, Auth)
- Global styles

#### `src/app/page.tsx`
Главная страница (Dashboard):
- Статистика пользователя
- Последние турниры
- Quick actions

#### `src/lib/supabase.ts`
Supabase клиент:
- Client-side клиент
- Server-side клиент
- Типы базы данных
- Утилиты для работы с БД

#### `src/types/index.ts`
Все TypeScript типы:
- User, Tournament, TournamentResult
- FormData типы
- API Response типы
- Utility типы

#### `src/bot/index.ts`
Основной файл Telegram бота:
- Инициализация бота
- Обработка команд
- Обработка сообщений
- Управление сессиями

---

## 🧪 Тестирование

### Покрытие тестами
- **104 теста** с 100% success rate
- Юнит-тесты для всех компонентов и сервисов
- Интеграционные тесты для критических сценариев
- Тесты производительности

### Команды
```bash
npm test              # Запуск всех тестов
npm run test:watch    # Watch режим
npm run test:coverage # Coverage report
```

### Структура тестов
```
__tests__/
├── api/           # API routes тесты
├── bot/           # Telegram bot тесты
├── components/    # React компоненты тесты
├── hooks/         # Custom hooks тесты
├── integration/   # Интеграционные тесты
├── lib/           # Утилиты тесты
├── mocks/         # Моки (Supabase, Telegraf)
├── performance/   # Performance тесты
└── services/      # Сервисы тесты
```

---

## 🚀 Deployment и CI/CD

### Vercel Deployment
- Автоматический деплой из Git репозитория
- Preview deployments для PR
- Production deployment для main branch
- Environment variables управляются через Vercel Dashboard

### Environment Variables
```env
# Supabase
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# Telegram Bot
TELEGRAM_BOT_TOKEN=
BOT_MODE=polling|webhook
BOT_WEBHOOK_URL=
BOT_AUTO_RESTART=true|false

# App
NEXT_PUBLIC_APP_URL=
```

### Build & Deploy
```bash
npm run build    # Сборка для production
npm run start    # Запуск production сервера
npm run analyze  # Анализ размера бандла
```

---

## 📊 Производительность

### Метрики
- **Bundle size**: ~102 kB (First Load JS)
- **Build time**: ~4 секунды
- **Test suite**: ~16 секунд
- **Static pages**: 18 страниц

### Оптимизации
- Tree shaking и code splitting
- Image optimization через Next.js Image
- Server Components для уменьшения client bundle
- React Query для кэширования данных
- Lazy loading компонентов

---

## 🔐 Безопасность

### Аутентификация
- Supabase Auth (email/password, OAuth)
- JWT токены
- Refresh tokens
- Protected routes

### Авторизация
- Row Level Security (RLS) в PostgreSQL
- Server-side проверки в API routes
- Client-side guards в UI

### Защита данных
- HTTPS only
- Environment variables для секретов
- CSRF protection
- SQL injection protection (через Supabase ORM)

---

## 📝 Best Practices

### Code Style
- TypeScript strict mode
- Функциональные компоненты
- Hooks для state management
- Composition over inheritance
- Single Responsibility Principle

### File Naming
- `kebab-case` для файлов и папок
- `PascalCase` для React компонентов
- `camelCase` для переменных и функций
- `UPPER_CASE` для констант

### Commits
- Conventional commits format
- Clear and descriptive messages
- Small, focused commits

### Code Organization
- Избегать дублирования кода
- Проверять существующие реализации
- Рефакторить при >200-300 строках
- Документировать сложную логику
- Использовать сервисный слой для бизнес-логики
- Использовать компонентные фабрики для переиспользования кода
- Выносить общую функциональность в отдельные утилиты

---

## 🔄 Development Workflow

### Локальная разработка
```bash
npm run dev      # Запуск dev сервера (http://localhost:3000)
npm run lint     # Линтинг с Biome
npm run format   # Форматирование кода
npm test         # Запуск тестов
```

### Environments
- **Development**: Локальная разработка с мок данными
- **Test**: Тестовое окружение для CI/CD
- **Production**: Production на Vercel

### Debugging
- Next.js DevTools
- React DevTools
- Browser DevTools
- Vercel Logs для production

---

## 📚 Дополнительные ресурсы

### Документация
- `/docs` - Документация проекта
- `/sql-scripts/README.md` - SQL скрипты
- `/src/bot/README.md` - Telegram bot документация
- `PROJECT_REQUIREMENTS.md` - Требования проекта
- `README.md` - Основная документация

### Полезные ссылки
- [Next.js Documentation](https://nextjs.org/docs)
- [Supabase Documentation](https://supabase.com/docs)
- [Telegraf Documentation](https://telegraf.js.org/)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [TypeScript Handbook](https://www.typescriptlang.org/docs/)

---

## 🎯 Roadmap (Planned Features)

- [ ] OCR интеграция с Google Cloud Vision API
- [ ] Push-уведомления
- [ ] PWA (Progressive Web App)
- [ ] Мультиязычность (RU/EN)
- [ ] Экспорт данных (CSV, PDF)
- [ ] Социальные функции (друзья, лидерборд)
- [ ] Темная тема
- [ ] Мобильное приложение (React Native)

---

## 📞 Support & Maintenance

### Версионирование
- Semantic versioning (MAJOR.MINOR.PATCH)
- Текущая версия: **1.3.1**
- Changelog в `/docs/RELEASE_*.md`

### Issue Tracking
- GitHub Issues для багов и фич
- Pull Requests для вклада в проект

### Мониторинг
- Vercel Analytics для производительности
- Error tracking (планируется Sentry)
- Supabase Dashboard для БД метрик

---

**Статус проекта**: 🟢 Active Development  
**Версия**: 1.4.7
