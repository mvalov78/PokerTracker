"use client";

import { useEffect, useState } from "react";

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º
 */

interface BotStatus {
  currentMode: "polling" | "webhook";
  botStatus: "active" | "inactive" | "error";
  webhookInfo?: {
    url: string;
    has_custom_certificate: boolean;
    pending_update_count: number;
    last_error_date?: number;
    last_error_message?: string;
  };
  settings?: Record<string, string>;
  botInstanceStatus?: {
    status: string;
    mode: string;
    isRunning: boolean;
  };
}

export default function BotManagementPage() {
  const [botStatus, setBotStatus] = useState<BotStatus | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    loadBotStatus();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadBotStatus, 30000);
    return () => clearInterval(interval);
  }, []);

  const loadBotStatus = async () => {
    try {
      const response = await fetch("/api/admin/bot-mode");
      const data = await response.json();

      if (data.success) {
        setBotStatus(data);
        setError(null);
      } else {
        setError(data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:", err);
      setError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
    } finally {
      setLoading(false);
    }
  };

  const controlPolling = async (command: string) => {
    try {
      const response = await fetch("/api/bot/polling", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ command }),
      });

      const result = await response.json();

      if (result.success) {
        alert(`‚úÖ ${result.message}`);
        await loadBotStatus(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error) {
      alert("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É");
      console.error("–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è polling:", error);
    }
  };

  const switchMode = async (
    mode: "polling" | "webhook",
    webhookUrl?: string,
  ) => {
    try {
      setLoading(true);
      const response = await fetch("/api/admin/bot-mode", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ mode, webhookUrl }),
      });

      const result = await response.json();

      if (result.success) {
        alert(`‚úÖ ${result.message}`);
        await loadBotStatus();
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error) {
      alert("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞");
      console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞:", error);
    } finally {
      setLoading(false);
    }
  };

  const initializeBot = async () => {
    try {
      setLoading(true);
      const response = await fetch("/api/bot/init", {
        method: "POST",
      });

      const result = await response.json();

      if (result.success) {
        alert(
          `‚úÖ ${result.message}\n\n–†–µ–∂–∏–º: ${result.mode}\n${result.webhookUrl ? `Webhook URL: ${result.webhookUrl}` : ""}`,
        );
        await loadBotStatus();
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:\n${result.error}`);
      }
    } catch (error) {
      alert("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞");
      console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
    } finally {
      setLoading(false);
    }
  };

  const simulateCommand = async (command: string) => {
    try {
      const response = await fetch("/api/bot/polling", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          command: "simulate",
          data: { command },
        }),
      });

      const result = await response.json();

      if (result.success) {
        alert(`üß™ ${result.message}`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error) {
      alert("‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã");
      console.error("–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏:", error);
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
  const getStatusDisplay = () => {
    if (loading && !botStatus) {
      return { icon: "‚è≥", text: "–ó–∞–≥—Ä—É–∑–∫–∞...", color: "text-gray-600" };
    }

    if (error) {
      return { icon: "‚ùå", text: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", color: "text-red-600" };
    }

    if (!botStatus) {
      return { icon: "‚ùì", text: "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", color: "text-gray-600" };
    }

    const mode = botStatus.currentMode;
    const status = botStatus.botStatus;

    if (status === "error") {
      return {
        icon: "‚ö†Ô∏è",
        text: "–ë–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—à–∏–±–∫–∏",
        color: "text-red-600",
      };
    }

    if (status === "inactive") {
      return { icon: "‚è∏Ô∏è", text: "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", color: "text-gray-600" };
    }

    if (mode === "webhook") {
      return {
        icon: "üîó",
        text: "Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω",
        color: "text-green-600",
        description: "–ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook",
      };
    }

    return {
      icon: "üîÑ",
      text: "Polling —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω",
      color: "text-blue-600",
      description: "–ë–æ—Ç –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä Telegram –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥",
    };
  };

  const statusDisplay = getStatusDisplay();

  return (
    <div className="bg-gray-50 dark:bg-gray-900 min-h-screen">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –ë–æ—Ç–æ–º
              </h1>
              <p className="text-gray-600 dark:text-gray-400">
                –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º –¥–ª—è PokerTracker Pro
              </p>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={initializeBot}
                disabled={loading}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
                title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å webhook –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_WEBHOOK_URL"
              >
                {loading ? "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞..." : "‚öôÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑ .env"}
              </button>
              <button
                onClick={loadBotStatus}
                disabled={loading}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
              >
                {loading ? "‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"}
              </button>
            </div>
          </div>
        </div>

        {/* Status Card */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            üì° –°—Ç–∞—Ç—É—Å –ë–æ—Ç–∞
          </h2>

          <div className="flex items-center space-x-3 mb-4">
            <span className="text-2xl">{statusDisplay.icon}</span>
            <div>
              <div
                className={`font-semibold ${statusDisplay.color} dark:${statusDisplay.color}`}
              >
                {statusDisplay.text}
              </div>
              {statusDisplay.description && (
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  {statusDisplay.description}
                </div>
              )}
            </div>
          </div>

          {/* –î–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ */}
          {botStatus && (
            <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg text-sm">
              <div className="grid grid-cols-2 gap-2">
                <div>
                  <span className="text-gray-600 dark:text-gray-400">
                    –†–µ–∂–∏–º:
                  </span>
                  <span className="ml-2 font-medium text-gray-900 dark:text-white">
                    {botStatus.currentMode === "webhook"
                      ? "Webhook"
                      : "Polling"}
                  </span>
                </div>
                <div>
                  <span className="text-gray-600 dark:text-gray-400">
                    –°—Ç–∞—Ç—É—Å:
                  </span>
                  <span className="ml-2 font-medium text-gray-900 dark:text-white">
                    {botStatus.botStatus === "active"
                      ? "–ê–∫—Ç–∏–≤–µ–Ω"
                      : botStatus.botStatus === "inactive"
                        ? "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                        : "–û—à–∏–±–∫–∞"}
                  </span>
                </div>
                {botStatus.currentMode === "webhook" &&
                  botStatus.webhookInfo && (
                    <>
                      <div className="col-span-2">
                        <span className="text-gray-600 dark:text-gray-400">
                          Webhook URL:
                        </span>
                        <div className="ml-2 font-mono text-xs text-gray-900 dark:text-white break-all">
                          {botStatus.webhookInfo.url || "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
                        </div>
                      </div>
                      {botStatus.webhookInfo.pending_update_count > 0 && (
                        <div className="col-span-2">
                          <span className="text-yellow-600">
                            ‚ö†Ô∏è –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:{" "}
                            {botStatus.webhookInfo.pending_update_count}
                          </span>
                        </div>
                      )}
                      {botStatus.webhookInfo.last_error_message && (
                        <div className="col-span-2">
                          <span className="text-red-600">
                            ‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:{" "}
                            {botStatus.webhookInfo.last_error_message}
                          </span>
                        </div>
                      )}
                    </>
                  )}
              </div>
            </div>
          )}

          <div className="flex space-x-2 mt-4">
            {botStatus?.currentMode === "polling" && (
              <>
                <button
                  onClick={() => controlPolling("start")}
                  disabled={loading || botStatus?.botStatus === "active"}
                  className="px-3 py-1 bg-green-500 text-white rounded text-sm hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å
                </button>
                <button
                  onClick={() => controlPolling("stop")}
                  disabled={loading || botStatus?.botStatus === "inactive"}
                  className="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  ‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                </button>
                <button
                  onClick={() => controlPolling("restart")}
                  disabled={loading}
                  className="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
                </button>
              </>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ */}
            <button
              onClick={() => {
                if (botStatus?.currentMode === "polling") {
                  const url = prompt(
                    "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è webhook (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-app.vercel.app/api/telegram/webhook):",
                  );
                  if (url) {
                    switchMode("webhook", url);
                  }
                } else {
                  if (confirm("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ polling —Ä–µ–∂–∏–º?")) {
                    switchMode("polling");
                  }
                }
              }}
              disabled={loading}
              className="ml-auto px-3 py-1 bg-purple-500 text-white rounded text-sm hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞{" "}
              {botStatus?.currentMode === "polling" ? "Webhook" : "Polling"}
            </button>
          </div>
        </div>

        {/* Features Card */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center space-x-2">
              <span className="text-green-500">‚úÖ</span>
              <span className="text-gray-700 dark:text-gray-300">
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-green-500">‚úÖ</span>
              <span className="text-gray-700 dark:text-gray-300">
                –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-green-500">‚úÖ</span>
              <span className="text-gray-700 dark:text-gray-300">
                OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-green-500">‚úÖ</span>
              <span className="text-gray-700 dark:text-gray-300">
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-green-500">‚úÖ</span>
              <span className="text-gray-700 dark:text-gray-300">
                –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-green-500">‚úÖ</span>
              <span className="text-gray-700 dark:text-gray-300">
                –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
              </span>
            </div>
          </div>
        </div>

        {/* Test Commands Card */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
          </h2>

          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            <button
              onClick={() => simulateCommand("/start")}
              className="p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg text-left hover:bg-blue-100 dark:hover:bg-blue-900/40 transition-colors"
            >
              <code className="text-blue-600 dark:text-blue-400 font-mono text-sm">
                /start
              </code>
              <div className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
              </div>
            </button>

            <button
              onClick={() => simulateCommand("/stats")}
              className="p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg text-left hover:bg-green-100 dark:hover:bg-green-900/40 transition-colors"
            >
              <code className="text-green-600 dark:text-green-400 font-mono text-sm">
                /stats
              </code>
              <div className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </div>
            </button>

            <button
              onClick={() => simulateCommand("/help")}
              className="p-3 bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg text-left hover:bg-purple-100 dark:hover:bg-purple-900/40 transition-colors"
            >
              <code className="text-purple-600 dark:text-purple-400 font-mono text-sm">
                /help
              </code>
              <div className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                –°–ø—Ä–∞–≤–∫–∞
              </div>
            </button>

            <button
              onClick={() => simulateCommand("/tournaments")}
              className="p-3 bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg text-left hover:bg-orange-100 dark:hover:bg-orange-900/40 transition-colors"
            >
              <code className="text-orange-600 dark:text-orange-400 font-mono text-sm">
                /tournaments
              </code>
              <div className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                –¢—É—Ä–Ω–∏—Ä—ã
              </div>
            </button>

            <button
              onClick={() => simulateCommand("/register")}
              className="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg text-left hover:bg-red-100 dark:hover:bg-red-900/40 transition-colors"
            >
              <code className="text-red-600 dark:text-red-400 font-mono text-sm">
                /register
              </code>
              <div className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
              </div>
            </button>

            <button
              onClick={() => simulateCommand("/settings")}
              className="p-3 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg text-left hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
            >
              <code className="text-gray-600 dark:text-gray-400 font-mono text-sm">
                /settings
              </code>
              <div className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </div>
            </button>
          </div>

          <div className="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
            <div className="flex items-start space-x-2">
              <span className="text-yellow-500">‚ö°</span>
              <div className="text-sm text-yellow-800 dark:text-yellow-200">
                <strong>–°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥:</strong> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–º–∞–Ω–¥—ã,
                —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤
                –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.
              </div>
            </div>
          </div>
        </div>

        {/* Commands Card */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
          </h2>

          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <code className="text-blue-600 dark:text-blue-400 font-mono">
                  /start
                </code>
                <span className="ml-2 text-gray-600 dark:text-gray-400">
                  –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                </span>
              </div>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <code className="text-blue-600 dark:text-blue-400 font-mono">
                  /register
                </code>
                <span className="ml-2 text-gray-600 dark:text-gray-400">
                  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
                </span>
              </div>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <code className="text-blue-600 dark:text-blue-400 font-mono">
                  /result
                </code>
                <span className="ml-2 text-gray-600 dark:text-gray-400">
                  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
                </span>
              </div>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <code className="text-blue-600 dark:text-blue-400 font-mono">
                  /stats
                </code>
                <span className="ml-2 text-gray-600 dark:text-gray-400">
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
                </span>
              </div>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div>
                <code className="text-blue-600 dark:text-blue-400 font-mono">
                  /settings
                </code>
                <span className="ml-2 text-gray-600 dark:text-gray-400">
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Environment Variables Info */}
        <div className="mt-8 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
          <div className="flex items-start space-x-3">
            <span className="text-green-500 text-xl">‚öôÔ∏è</span>
            <div className="flex-1">
              <h3 className="font-semibold text-green-900 dark:text-green-100 mb-2">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
              </h3>
              <p className="text-green-800 dark:text-green-200 text-sm mb-3">
                –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É{" "}
                <strong>&quot;‚öôÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑ .env&quot;</strong> —á—Ç–æ–±—ã
                –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è{" "}
                <code className="bg-green-100 dark:bg-green-800 px-1 rounded">
                  BOT_WEBHOOK_URL
                </code>
                .
              </p>
              <div className="text-xs text-green-700 dark:text-green-300 space-y-1">
                <div>
                  üí° <strong>–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong> –ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –Ω–∞ Vercel
                  –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                </div>
                <div>
                  ‚úÖ <strong>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:</strong> –ß–∏—Ç–∞–µ—Ç BOT_MODE –∏
                  BOT_WEBHOOK_URL –∏–∑ .env –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –≤
                  Telegram
                </div>
                <div>
                  ‚ö° <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:</strong> –ù–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç—å URL
                  - –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Info */}
        <div className="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
          <div className="flex items-start space-x-3">
            <span className="text-blue-500 text-xl">‚ÑπÔ∏è</span>
            <div>
              <h3 className="font-semibold text-blue-900 dark:text-blue-100 mb-1">
                –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
              </h3>

              <div className="mt-2 space-y-3">
                <div>
                  <h4 className="font-medium text-blue-800 dark:text-blue-200 text-sm">
                    üîÑ Polling —Ä–µ–∂–∏–º (Long Polling)
                  </h4>
                  <p className="text-blue-700 dark:text-blue-300 text-xs mt-1">
                    –ë–æ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö
                    —Å–æ–æ–±—â–µ–Ω–∏–π.
                  </p>
                  <div className="mt-1 text-xs text-blue-600 dark:text-blue-400">
                    <div>
                      ‚Ä¢ <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞,
                      —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
                    </div>
                    <div>
                      ‚Ä¢ <strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> –ë–æ–ª—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä,
                      –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-blue-800 dark:text-blue-200 text-sm">
                    üîó Webhook —Ä–µ–∂–∏–º
                  </h4>
                  <p className="text-blue-700 dark:text-blue-300 text-xs mt-1">
                    Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑
                    webhook URL.
                  </p>
                  <div className="mt-1 text-xs text-blue-600 dark:text-blue-400">
                    <div>
                      ‚Ä¢ <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –º–µ–Ω—å—à–µ
                      –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    </div>
                    <div>
                      ‚Ä¢ <strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> –¢—Ä–µ–±—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π HTTPS URL
                    </div>
                    <div>
                      ‚Ä¢ <strong>–î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:</strong> ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
                      –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook —Ä–µ–∂–∏–º
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
