'use client'

import { useState, useEffect } from 'react'
import { useAuth, ProtectedRoute } from '@/hooks/useAuth'
import Button from '@/components/ui/Button'
import Card, { CardContent, CardHeader, CardTitle } from '@/components/ui/Card'
import Input, { Select, Textarea } from '@/components/ui/Input'
import { Breadcrumbs } from '@/components/ui/Navigation'
import { useToast } from '@/components/ui/Toast'
import TelegramIntegration from '@/components/TelegramIntegration'

function SettingsContent() {
  const { user } = useAuth()
  const { addToast } = useToast()
  
  const [isLoading, setIsLoading] = useState(false)
  
  // Profile Settings
  const [profileSettings, setProfileSettings] = useState({
    username: user?.username || '',
    email: user?.email || '',
    firstName: user?.firstName || '',
    lastName: user?.lastName || '',
    bio: user?.bio || '',
    location: user?.location || '',
    timezone: user?.timezone || 'UTC',
    language: user?.language || 'ru'
  })

  // Telegram Integration
  const [telegramSettings, setTelegramSettings] = useState({
    telegramId: null as string | null,
    isLinked: false,
    linkingCode: '',
    isGeneratingCode: false
  })

  // Notification Settings
  const [notificationSettings, setNotificationSettings] = useState({
    email: {
      tournaments: true,
      results: true,
      bankroll: true,
      weekly: true
    },
    telegram: {
      tournaments: false,
      results: false,
      bankroll: false,
      instant: false
    },
    push: {
      enabled: false,
      tournaments: false,
      results: false
    }
  })

  // Privacy Settings
  const [privacySettings, setPrivacySettings] = useState({
    profilePublic: false,
    showRealName: false,
    shareStatistics: false,
    allowAnalytics: true
  })

  // App Settings
  const [appSettings, setAppSettings] = useState({
    theme: 'dark',
    currency: 'USD',
    dateFormat: 'DD/MM/YYYY',
    timeFormat: '24h',
    compactMode: false,
    showAnimations: true,
    autoSave: true
  })

  const handleProfileChange = (field: string, value: any) => {
    setProfileSettings(prev => ({ ...prev, [field]: value }))
  }

  const handleNotificationChange = (category: string, field: string, value: boolean) => {
    setNotificationSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category as keyof typeof prev],
        [field]: value
      }
    }))
  }

  const handlePrivacyChange = (field: string, value: boolean) => {
    setPrivacySettings(prev => ({ ...prev, [field]: value }))
  }

  const handleAppSettingsChange = (field: string, value: any) => {
    setAppSettings(prev => ({ ...prev, [field]: value }))
  }

  const handleSaveSettings = async () => {
    setIsLoading(true)
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      await new Promise(resolve => setTimeout(resolve, 1500))
      
      addToast({
        type: 'success',
        message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!'
      })
    } catch (error) {
      addToast({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Telegram Integration Functions
  const generateLinkingCode = async () => {
    setTelegramSettings(prev => ({ ...prev, isGeneratingCode: true }))
    try {
      const response = await fetch('/api/telegram/generate-code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: user?.id })
      })
      
      const result = await response.json()
      if (result.success) {
        setTelegramSettings(prev => ({ 
          ...prev, 
          linkingCode: result.code,
          isGeneratingCode: false
        }))
        addToast({
          type: 'success',
          message: '–ö–æ–¥ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ Telegram'
        })
      } else {
        throw new Error(result.error)
      }
    } catch (error) {
      addToast({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è'
      })
      setTelegramSettings(prev => ({ ...prev, isGeneratingCode: false }))
    }
  }

  const unlinkTelegram = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç?')) return
    
    try {
      const response = await fetch('/api/telegram/unlink', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: user?.id })
      })
      
      const result = await response.json()
      if (result.success) {
        setTelegramSettings({
          telegramId: null,
          isLinked: false,
          linkingCode: '',
          isGeneratingCode: false
        })
        addToast({
          type: 'success',
          message: 'Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
        })
      } else {
        throw new Error(result.error)
      }
    } catch (error) {
      addToast({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞'
      })
    }
  }

  const checkTelegramStatus = async () => {
    try {
      const response = await fetch(`/api/telegram/status?userId=${user?.id}`)
      const result = await response.json()
      if (result.success && result.telegram) {
        setTelegramSettings(prev => ({
          ...prev,
          telegramId: result.telegram.telegramId,
          isLinked: true
        }))
      }
    } catch (error) {
      console.error('Error checking Telegram status:', error)
    }
  }

  // Load Telegram status on component mount
  useEffect(() => {
    if (user?.id) {
      checkTelegramStatus()
    }
  }, [user?.id])

  const handleExportData = async () => {
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
      addToast({
        type: 'info',
        message: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...'
      })
      
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
      const exportData = {
        tournaments: 'mock_tournaments_data',
        bankroll: 'mock_bankroll_data',
        settings: 'mock_settings_data',
        exportDate: new Date().toISOString()
      }
      
      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `poker-tracker-export-${new Date().toISOString().split('T')[0]}.json`
      a.click()
      
      addToast({
        type: 'success',
        message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!'
      })
    } catch (error) {
      addToast({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö'
      })
    }
  }

  const handleResetSettings = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      setProfileSettings({
        username: user?.username || '',
        email: user?.email || '',
        firstName: '',
        lastName: '',
        bio: '',
        location: '',
        timezone: 'UTC',
        language: 'ru'
      })
      
      setNotificationSettings({
        email: { tournaments: true, results: true, bankroll: true, weekly: true },
        telegram: { tournaments: false, results: false, bankroll: false, instant: false },
        push: { enabled: false, tournaments: false, results: false }
      })
      
      setPrivacySettings({
        profilePublic: false,
        showRealName: false,
        shareStatistics: false,
        allowAnalytics: true
      })
      
      setAppSettings({
        theme: 'dark',
        currency: 'USD',
        dateFormat: 'DD/MM/YYYY',
        timeFormat: '24h',
        compactMode: false,
        showAnimations: true,
        autoSave: true
      })
      
      addToast({
        type: 'success',
        message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
      })
    }
  }

  return (
    <div className="bg-gray-50 dark:bg-gray-900 min-h-screen">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Breadcrumbs */}
        <Breadcrumbs 
          items={[
            { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/' },
            { label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' }
          ]} 
          className="mb-6"
        />

        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          </p>
        </div>

        <div className="space-y-8">
          {/* Profile Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>üë§</span>
                <span>–ü—Ä–æ—Ñ–∏–ª—å</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Input
                  label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                  value={profileSettings.username}
                  onChange={(e) => handleProfileChange('username', e.target.value)}
                />
                
                <Input
                  type="email"
                  label="Email"
                  value={profileSettings.email}
                  onChange={(e) => handleProfileChange('email', e.target.value)}
                />
                
                <Input
                  label="–ò–º—è"
                  value={profileSettings.firstName}
                  onChange={(e) => handleProfileChange('firstName', e.target.value)}
                />
                
                <Input
                  label="–§–∞–º–∏–ª–∏—è"
                  value={profileSettings.lastName}
                  onChange={(e) => handleProfileChange('lastName', e.target.value)}
                />
                
                <Input
                  label="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                  value={profileSettings.location}
                  onChange={(e) => handleProfileChange('location', e.target.value)}
                />
                
                <Select
                  label="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"
                  value={profileSettings.timezone}
                  onChange={(e) => handleProfileChange('timezone', e.target.value)}
                  options={[
                    { value: 'UTC', label: 'UTC' },
                    { value: 'Europe/Moscow', label: '–ú–æ—Å–∫–≤–∞ (UTC+3)' },
                    { value: 'Europe/London', label: '–õ–æ–Ω–¥–æ–Ω (UTC+0)' },
                    { value: 'America/New_York', label: '–ù—å—é-–ô–æ—Ä–∫ (UTC-5)' },
                    { value: 'America/Los_Angeles', label: '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (UTC-8)' }
                  ]}
                />
              </div>
              
              <Textarea
                label="–û —Å–µ–±–µ"
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –≤ –ø–æ–∫–µ—Ä–µ..."
                value={profileSettings.bio}
                onChange={(e) => handleProfileChange('bio', e.target.value)}
                rows={3}
              />
            </CardContent>
          </Card>

          {/* Telegram Integration */}
          <TelegramIntegration />

          {/* App Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>üé®</span>
                <span>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Select
                  label="–¢–µ–º–∞"
                  value={appSettings.theme}
                  onChange={(e) => handleAppSettingsChange('theme', e.target.value)}
                  options={[
                    { value: 'light', label: '–°–≤–µ—Ç–ª–∞—è' },
                    { value: 'dark', label: '–¢–µ–º–Ω–∞—è' },
                    { value: 'auto', label: '–°–∏—Å—Ç–µ–º–Ω–∞—è' }
                  ]}
                />
                
                <Select
                  label="–í–∞–ª—é—Ç–∞"
                  value={appSettings.currency}
                  onChange={(e) => handleAppSettingsChange('currency', e.target.value)}
                  options={[
                    { value: 'USD', label: '–î–æ–ª–ª–∞—Ä –°–®–ê ($)' },
                    { value: 'EUR', label: '–ï–≤—Ä–æ (‚Ç¨)' },
                    { value: 'RUB', label: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å (‚ÇΩ)' },
                    { value: 'GBP', label: '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤ (¬£)' }
                  ]}
                />
                
                <Select
                  label="–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
                  value={appSettings.dateFormat}
                  onChange={(e) => handleAppSettingsChange('dateFormat', e.target.value)}
                  options={[
                    { value: 'DD/MM/YYYY', label: '–î–î/–ú–ú/–ì–ì–ì–ì' },
                    { value: 'MM/DD/YYYY', label: '–ú–ú/–î–î/–ì–ì–ì–ì' },
                    { value: 'YYYY-MM-DD', label: '–ì–ì–ì–ì-–ú–ú-–î–î' }
                  ]}
                />
                
                <Select
                  label="–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"
                  value={appSettings.timeFormat}
                  onChange={(e) => handleAppSettingsChange('timeFormat', e.target.value)}
                  options={[
                    { value: '24h', label: '24-—á–∞—Å–æ–≤–æ–π' },
                    { value: '12h', label: '12-—á–∞—Å–æ–≤–æ–π (AM/PM)' }
                  ]}
                />
              </div>
              
              <div className="space-y-4">
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="compactMode"
                    checked={appSettings.compactMode}
                    onChange={(e) => handleAppSettingsChange('compactMode', e.target.checked)}
                    className="w-4 h-4 text-emerald-600 bg-gray-100 border-gray-300 rounded focus:ring-emerald-500 dark:focus:ring-emerald-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                  />
                  <label htmlFor="compactMode" className="text-sm font-medium text-gray-900 dark:text-white">
                    –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                  </label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="showAnimations"
                    checked={appSettings.showAnimations}
                    onChange={(e) => handleAppSettingsChange('showAnimations', e.target.checked)}
                    className="w-4 h-4 text-emerald-600 bg-gray-100 border-gray-300 rounded focus:ring-emerald-500 dark:focus:ring-emerald-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                  />
                  <label htmlFor="showAnimations" className="text-sm font-medium text-gray-900 dark:text-white">
                    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
                  </label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="autoSave"
                    checked={appSettings.autoSave}
                    onChange={(e) => handleAppSettingsChange('autoSave', e.target.checked)}
                    className="w-4 h-4 text-emerald-600 bg-gray-100 border-gray-300 rounded focus:ring-emerald-500 dark:focus:ring-emerald-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                  />
                  <label htmlFor="autoSave" className="text-sm font-medium text-gray-900 dark:text-white">
                    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                  </label>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Notification Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>üîî</span>
                <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <h4 className="font-medium text-gray-900 dark:text-white mb-4">Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                <div className="space-y-3">
                  {Object.entries(notificationSettings.email).map(([key, value]) => (
                    <div key={key} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        id={`email-${key}`}
                        checked={value}
                        onChange={(e) => handleNotificationChange('email', key, e.target.checked)}
                        className="w-4 h-4 text-emerald-600 bg-gray-100 border-gray-300 rounded focus:ring-emerald-500 dark:focus:ring-emerald-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                      />
                      <label htmlFor={`email-${key}`} className="text-sm font-medium text-gray-900 dark:text-white">
                        {key === 'tournaments' && '–ù–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã'}
                        {key === 'results' && '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤'}
                        {key === 'bankroll' && '–ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–Ω–∫—Ä–æ–ª–ª–∞'}
                        {key === 'weekly' && '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã'}
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h4 className="font-medium text-gray-900 dark:text-white mb-4">Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                <div className="space-y-3">
                  {Object.entries(notificationSettings.push).map(([key, value]) => (
                    <div key={key} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        id={`push-${key}`}
                        checked={value}
                        onChange={(e) => handleNotificationChange('push', key, e.target.checked)}
                        className="w-4 h-4 text-emerald-600 bg-gray-100 border-gray-300 rounded focus:ring-emerald-500 dark:focus:ring-emerald-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                      />
                      <label htmlFor={`push-${key}`} className="text-sm font-medium text-gray-900 dark:text-white">
                        {key === 'enabled' && '–í–∫–ª—é—á–∏—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}
                        {key === 'tournaments' && '–¢—É—Ä–Ω–∏—Ä—ã'}
                        {key === 'results' && '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Privacy Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>üîí</span>
                <span>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {Object.entries(privacySettings).map(([key, value]) => (
                  <div key={key} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id={key}
                      checked={value}
                      onChange={(e) => handlePrivacyChange(key, e.target.checked)}
                      className="w-4 h-4 text-emerald-600 bg-gray-100 border-gray-300 rounded focus:ring-emerald-500 dark:focus:ring-emerald-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                    />
                    <label htmlFor={key} className="text-sm font-medium text-gray-900 dark:text-white">
                      {key === 'profilePublic' && '–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å'}
                      {key === 'showRealName' && '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è'}
                      {key === 'shareStatistics' && '–î–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π'}
                      {key === 'allowAnalytics' && '–†–∞–∑—Ä–µ—à–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É'}
                    </label>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Data Management */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>üíæ</span>
                <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                  <div>
                    <h4 className="font-medium text-blue-900 dark:text-blue-100">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h4>
                    <p className="text-sm text-blue-700 dark:text-blue-300">
                      –°–∫–∞—á–∞–π—Ç–µ –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                    </p>
                  </div>
                  <Button
                    variant="outline"
                    onClick={handleExportData}
                    className="border-blue-300 text-blue-600 hover:bg-blue-50 dark:border-blue-700 dark:text-blue-400 dark:hover:bg-blue-900/30"
                  >
                    üì• –≠–∫—Å–ø–æ—Ä—Ç
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800">
                  <div>
                    <h4 className="font-medium text-red-900 dark:text-red-100">–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫</h4>
                    <p className="text-sm text-red-700 dark:text-red-300">
                      –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    </p>
                  </div>
                  <Button
                    variant="outline"
                    onClick={handleResetSettings}
                    className="border-red-300 text-red-600 hover:bg-red-50 dark:border-red-700 dark:text-red-400 dark:hover:bg-red-900/30"
                  >
                    üîÑ –°–±—Ä–æ—Å–∏—Ç—å
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex justify-center space-x-4 pt-8">
            <Button
              variant="outline"
              onClick={() => window.history.back()}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </Button>
            <Button
              onClick={handleSaveSettings}
              loading={isLoading}
              className="bg-emerald-500 hover:bg-emerald-600 min-w-[200px]"
            >
              {isLoading ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default function SettingsPage() {
  return (
    <ProtectedRoute>
      <SettingsContent />
    </ProtectedRoute>
  )
}
