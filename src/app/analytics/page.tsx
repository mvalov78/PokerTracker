"use client";

import Button from "@/components/ui/Button";
import Card, { CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
import { ProtectedRoute, useAuth } from "@/hooks/useAuth";
import { useTournaments } from "@/hooks/useTournaments";
import { useRouter } from "next/navigation";
import { useMemo, useState } from "react";

function AnalyticsContent() {
  const router = useRouter();
  const { user } = useAuth();
  const { tournaments, isLoading, error } = useTournaments(user?.id);
  const [timeRange, setTimeRange] = useState("all");

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
  const filteredTournaments = useMemo(() => {
    if (timeRange === "all") {
      return tournaments;
    }

    const now = new Date();
    const startDate = new Date();

    switch (timeRange) {
      case "week":
        startDate.setDate(now.getDate() - 7);
        break;
      case "month":
        startDate.setMonth(now.getMonth() - 1);
        break;
      case "year":
        startDate.setFullYear(now.getFullYear() - 1);
        break;
    }

    return tournaments.filter(
      (tournament) => new Date(tournament.date) >= startDate,
    );
  }, [tournaments, timeRange]);

  // –¢—É—Ä–Ω–∏—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  const tournamentsWithResults = useMemo(() => {
    return filteredTournaments.filter((tournament) => tournament.result);
  }, [filteredTournaments]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = useMemo(() => {
    const totalTournaments = filteredTournaments.length;
    const totalBuyins = filteredTournaments.reduce(
      (sum, t) => sum + t.buyin,
      0,
    );
    const totalWinnings = tournamentsWithResults.reduce(
      (sum, t) => sum + (t.result?.payout || 0),
      0,
    );

    // –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç: —É—á–∏—Ç—ã–≤–∞–µ–º –í–°–ï —Ç—É—Ä–Ω–∏—Ä—ã –¥–ª—è ROI
    // –¢—É—Ä–Ω–∏—Ä—ã –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ = –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –±–∞–π-–∏–Ω—ã (0 –≤—ã–∏–≥—Ä—ã—à–∞)
    const profit = totalWinnings - totalBuyins;
    const roi = totalBuyins > 0 ? (profit / totalBuyins) * 100 : 0;

    // –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç ITM: –æ—Ç –í–°–ï–• —Ç—É—Ä–Ω–∏—Ä–æ–≤
    // –¢—É—Ä–Ω–∏—Ä—ã –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ = –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –¥–µ–Ω—å–≥–∏ (ITM = 0)
    const cashCount = tournamentsWithResults.filter((t) => {
      const position = t.result?.position || 999;
      const participants = t.participants;

      if (participants && participants > 0) {
        // –ï—Å–ª–∏ –∑–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª–æ 15%
        return position <= participants * 0.15;
      } else {
        // –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å—á–∏—Ç–∞–µ–º ITM –ø–æ –ø—Ä–∏–±—ã–ª–∏ (payout > buyin)
        const payout = t.result?.payout || 0;
        return payout > t.buyin;
      }
    }).length;

    // ITM - –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –í–°–ï–• —Ç—É—Ä–Ω–∏—Ä–æ–≤, –≥–¥–µ –ø–æ–ø–∞–ª–∏ –≤ –¥–µ–Ω—å–≥–∏
    const itm = totalTournaments > 0 ? (cashCount / totalTournaments) * 100 : 0;

    const avgPosition =
      tournamentsWithResults.length > 0
        ? tournamentsWithResults.reduce(
            (sum, t) => sum + (t.result?.position || 0),
            0,
          ) / tournamentsWithResults.length
        : 0;

    const bestFinish =
      tournamentsWithResults.length > 0
        ? Math.min(
            ...tournamentsWithResults.map((t) => t.result?.position || 999),
          )
        : 0;

    const worstFinish =
      tournamentsWithResults.length > 0
        ? Math.max(
            ...tournamentsWithResults.map((t) => t.result?.position || 0),
          )
        : 0;

    return {
      totalTournaments,
      totalBuyins,
      totalWinnings,
      profit,
      roi,
      itm,
      avgPosition,
      bestFinish: bestFinish === 999 ? 0 : bestFinish,
      worstFinish,
    };
  }, [filteredTournaments, tournamentsWithResults]);

  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç—É—Ä–Ω–∏—Ä–æ–≤
  const tournamentTypeAnalysis = useMemo(() => {
    const typeMap = new Map();

    filteredTournaments.forEach((tournament) => {
      const type = tournament.type || "tournament";
      const existing = typeMap.get(type) || { type, count: 0, profit: 0 };

      existing.count += 1;
      existing.profit += tournament.result?.profit || -tournament.buyin;

      typeMap.set(type, existing);
    });

    return Array.from(typeMap.values()).sort((a, b) => b.count - a.count);
  }, [filteredTournaments]);

  // –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º
  const venueAnalysis = useMemo(() => {
    const venueMap = new Map();

    filteredTournaments.forEach((tournament) => {
      const venue = tournament.venue;
      const existing = venueMap.get(venue) || { venue, count: 0, profit: 0 };

      existing.count += 1;
      existing.profit += tournament.result?.profit || -tournament.buyin;

      venueMap.set(venue, existing);
    });

    return Array.from(venueMap.values()).sort((a, b) => b.count - a.count);
  }, [filteredTournaments]);

  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const recentResults = useMemo(() => {
    return tournamentsWithResults
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, 4)
      .map((tournament) => ({
        date: tournament.date,
        tournament: tournament.name,
        position: tournament.result?.position || 0,
        profit: tournament.result?.profit || 0,
      }));
  }, [tournamentsWithResults]);

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("ru-RU", {
      style: "currency",
      currency: "USD",
    }).format(amount);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-100 p-8">
        <div className="max-w-7xl mx-auto">
          <div className="text-center py-12">
            <div className="text-4xl mb-4">‚è≥</div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...
            </h3>
            <p className="text-gray-600">–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-100 p-8">
        <div className="max-w-7xl mx-auto">
          <div className="text-center py-12">
            <div className="text-4xl mb-4">‚ùå</div>
            <h3 className="text-lg font-semibold text-red-600 mb-2">
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            </h3>
            <p className="text-gray-600 mb-4">{error}</p>
            <Button onClick={() => window.location.reload()} variant="outline">
              üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          </h1>
          <p className="text-gray-600">
            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –ø–æ–∫–µ—Ä–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          </p>
        </div>

        {/* Time Range Filter */}
        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-semibold text-gray-900">
                –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
              </h2>
              <select
                value={timeRange}
                onChange={(e) => setTimeRange(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">–í—Å–µ –≤—Ä–µ–º—è</option>
                <option value="year">–¢–µ–∫—É—â–∏–π –≥–æ–¥</option>
                <option value="month">–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</option>
                <option value="week">–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è</option>
              </select>
            </div>
          </CardContent>
        </Card>

        {/* Main Stats */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card className="text-center">
            <CardContent className="p-6">
              <div className="text-3xl font-bold text-blue-600 mb-2">
                {stats.totalTournaments}
              </div>
              <div className="text-gray-600">–í—Å–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤</div>
            </CardContent>
          </Card>

          <Card className="text-center">
            <CardContent className="p-6">
              <div className="text-3xl font-bold text-red-600 mb-2">
                {formatCurrency(stats.totalBuyins)}
              </div>
              <div className="text-gray-600">–û–±—â–∏–µ –±–∞–π-–∏–Ω—ã</div>
            </CardContent>
          </Card>

          <Card className="text-center">
            <CardContent className="p-6">
              <div className="text-3xl font-bold text-green-600 mb-2">
                {formatCurrency(stats.totalWinnings)}
              </div>
              <div className="text-gray-600">–û–±—â–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏</div>
            </CardContent>
          </Card>

          <Card className="text-center">
            <CardContent className="p-6">
              <div
                className={`text-3xl font-bold mb-2 ${
                  stats.profit >= 0 ? "text-green-600" : "text-red-600"
                }`}
              >
                {formatCurrency(stats.profit)}
              </div>
              <div className="text-gray-600">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</div>
            </CardContent>
          </Card>
        </div>

        {/* Performance Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
          <Card className="text-center">
            <CardContent className="p-6">
              <div
                className={`text-3xl font-bold mb-2 ${
                  stats.roi >= 0 ? "text-green-600" : "text-red-600"
                }`}
              >
                {stats.roi >= 0 ? "+" : ""}
                {stats.roi.toFixed(1)}%
              </div>
              <div className="text-gray-600">ROI</div>
            </CardContent>
          </Card>

          <Card className="text-center">
            <CardContent className="p-6">
              <div className="text-3xl font-bold text-purple-600 mb-2">
                {stats.itm.toFixed(1)}%
              </div>
              <div className="text-gray-600">ITM</div>
            </CardContent>
          </Card>

          <Card className="text-center">
            <CardContent className="p-6">
              <div className="text-3xl font-bold text-orange-600 mb-2">
                {stats.avgPosition.toFixed(1)}
              </div>
              <div className="text-gray-600">–°—Ä–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ</div>
            </CardContent>
          </Card>

          <Card className="text-center">
            <CardContent className="p-6">
              <div className="text-3xl font-bold text-yellow-600 mb-2">
                ü•á {stats.bestFinish || "-"}
              </div>
              <div className="text-gray-600">–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
            </CardContent>
          </Card>

          <Card className="text-center">
            <CardContent className="p-6">
              <div className="text-3xl font-bold text-gray-600 mb-2">
                {stats.worstFinish || "-"}
              </div>
              <div className="text-gray-600">–•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Tournament Types Analysis */}
          <Card>
            <CardHeader>
              <CardTitle>–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç—É—Ä–Ω–∏—Ä–æ–≤</CardTitle>
            </CardHeader>
            <CardContent>
              {tournamentTypeAnalysis.length === 0 ? (
                <div className="text-center py-8">
                  <div className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</div>
                </div>
              ) : (
                <div className="space-y-4">
                  {tournamentTypeAnalysis.map((item) => (
                    <div
                      key={item.type}
                      className="flex items-center justify-between"
                    >
                      <div className="flex items-center space-x-3">
                        <div className="w-4 h-4 bg-blue-500 rounded"></div>
                        <span className="font-medium">{item.type}</span>
                        <span className="text-gray-500">
                          ({item.count} —Ç—É—Ä–Ω–∏—Ä–æ–≤)
                        </span>
                      </div>
                      <div
                        className={`font-semibold ${
                          item.profit >= 0 ? "text-green-600" : "text-red-600"
                        }`}
                      >
                        {formatCurrency(item.profit)}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Venues Analysis */}
          <Card>
            <CardHeader>
              <CardTitle>–ê–Ω–∞–ª–∏–∑ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º</CardTitle>
            </CardHeader>
            <CardContent>
              {venueAnalysis.length === 0 ? (
                <div className="text-center py-8">
                  <div className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</div>
                </div>
              ) : (
                <div className="space-y-4">
                  {venueAnalysis.map((item) => (
                    <div
                      key={item.venue}
                      className="flex items-center justify-between"
                    >
                      <div className="flex items-center space-x-3">
                        <div className="w-4 h-4 bg-green-500 rounded"></div>
                        <span className="font-medium">{item.venue}</span>
                        <span className="text-gray-500">
                          ({item.count} —Ç—É—Ä–Ω–∏—Ä–æ–≤)
                        </span>
                      </div>
                      <div
                        className={`font-semibold ${
                          item.profit >= 0 ? "text-green-600" : "text-red-600"
                        }`}
                      >
                        {formatCurrency(item.profit)}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Recent Results */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</CardTitle>
          </CardHeader>
          <CardContent>
            {recentResults.length === 0 ? (
              <div className="text-center py-8">
                <div className="text-gray-500">–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤</div>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –î–∞—Ç–∞
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –¢—É—Ä–Ω–∏—Ä
                      </th>
                      <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ú–µ—Å—Ç–æ
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ü—Ä–∏–±—ã–ª—å
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {recentResults.map((result, index) => (
                      <tr key={index} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {new Date(result.date).toLocaleDateString("ru-RU")}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {result.tournament}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-center">
                          #{result.position}
                          {result.position === 1 && " ü•á"}
                          {result.position === 2 && " ü•à"}
                          {result.position === 3 && " ü•â"}
                        </td>
                        <td
                          className={`px-6 py-4 whitespace-nowrap text-sm text-right font-semibold ${
                            result.profit >= 0
                              ? "text-green-600"
                              : "text-red-600"
                          }`}
                        >
                          {formatCurrency(result.profit)}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Actions */}
        <div className="flex flex-col sm:flex-row justify-center gap-4">
          <Button onClick={() => router.push("/tournaments")} variant="primary">
            üé∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
          </Button>
          <Button onClick={() => router.push("/bankroll")} variant="primary">
            üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫—Ä–æ–ª–ª–æ–º
          </Button>
          <Button onClick={() => router.push("/")} variant="outline">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
        </div>
      </div>
    </div>
  );
}

export default function AnalyticsPage() {
  return (
    <ProtectedRoute>
      <AnalyticsContent />
    </ProtectedRoute>
  );
}
