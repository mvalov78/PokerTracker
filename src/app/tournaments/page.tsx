'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { getAllTournaments, deleteTournament } from '@/data/mockData'
import type { Tournament } from '@/types'

export default function TournamentsPage() {
  const router = useRouter()
  const [searchTerm, setSearchTerm] = useState('')
  const [tournaments, setTournaments] = useState<Tournament[]>([])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadTournaments = async () => {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API
        const response = await fetch('/api/tournaments')
        if (response.ok) {
          const data = await response.json()
          if (data.success) {
            console.warn('[WEB] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', data.tournaments.length)
            data.tournaments.forEach((t: any) => {
              console.warn('[WEB] –¢—É—Ä–Ω–∏—Ä:', {
                name: t.name,
                id: t.id,
                has_result: !!t.result,
                has_tournament_results: !!t.tournament_results,
                tournament_results_type: typeof t.tournament_results,
                tournament_results_value: t.tournament_results
              })
            })
            setTournaments(data.tournaments)
            return
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —á–µ—Ä–µ–∑ API:', error)
      }
      
      // Fallback –Ω–∞ localStorage
      const allTournaments = getAllTournaments()
      setTournaments(allTournaments)
    }
    
    loadTournaments()
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º
    const interval = setInterval(loadTournaments, 2000)
    return () => clearInterval(interval)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
  const handleDeleteTournament = async (tournament: Tournament) => {
    const confirmDelete = confirm(
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä "${tournament.name}"?\n\n` +
      `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n` +
      `‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞\n` +
      `‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)\n` +
      `‚Ä¢ –í—Å—è —Å–≤—è–∑–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`
    )
    
    if (confirmDelete) {
      try {
        // –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ API
        const response = await fetch(`/api/tournaments?id=${tournament.id}`, {
          method: 'DELETE'
        })
        
        if (response.ok) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
          const updatedTournaments = tournaments.filter(t => t.id !== tournament.id)
          setTournaments(updatedTournaments)
          alert(`–¢—É—Ä–Ω–∏—Ä "${tournament.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`)
        } else {
          throw new Error('API deletion failed')
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API, –ø—Ä–æ–±—É–µ–º fallback:', error)
        
        // Fallback –Ω–∞ localStorage
        const success = deleteTournament(tournament.id)
        if (success) {
          const updatedTournaments = getAllTournaments()
          setTournaments(updatedTournaments)
          alert(`–¢—É—Ä–Ω–∏—Ä "${tournament.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`)
        } else {
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞')
        }
      }
    }
  }

  const filteredTournaments = tournaments.filter(tournament =>
    tournament.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    tournament.venue.toLowerCase().includes(searchTerm.toLowerCase())
  )

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            üé∞ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã
          </h1>
          <p className="text-gray-600">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –ø–æ–∫–µ—Ä–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
          </p>
        </div>

        {/* Search and Actions */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –ø–ª–æ—â–∞–¥–∫–µ..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full sm:w-96 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <div className="flex gap-3">
              <button
                onClick={() => router.push('/tournaments/add')}
                className="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition-colors"
              >
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
              </button>
              <button
                onClick={() => router.push('/analytics')}
                className="bg-purple-500 text-white px-6 py-2 rounded-lg hover:bg-purple-600 transition-colors"
              >
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </button>
            </div>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-3xl font-bold text-blue-600 mb-2">
              {filteredTournaments.length}
            </div>
            <div className="text-gray-600">–í—Å–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤</div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-3xl font-bold text-green-600 mb-2">
              ${filteredTournaments.reduce((sum, t) => sum + t.buyin, 0)}
            </div>
            <div className="text-gray-600">–û–±—â–∏–π –±–∞–π-–∏–Ω</div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6 text-center">
            <div className="text-3xl font-bold text-purple-600 mb-2">
              ${filteredTournaments.reduce((sum, t) => sum + (t.result?.payout || 0), 0)}
            </div>
            <div className="text-gray-600">–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à</div>
          </div>
        </div>

        {/* Tournaments List */}
        <div className="space-y-4">
          {filteredTournaments.length === 0 ? (
            <div className="bg-white rounded-lg shadow p-12 text-center">
              <div className="text-6xl mb-4">üé∞</div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                –¢—É—Ä–Ω–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </h3>
              <p className="text-gray-500 mb-6">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
              </p>
              <button
                onClick={() => router.push('/tournaments/add')}
                className="bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-600 transition-colors"
              >
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
              </button>
            </div>
          ) : (
            filteredTournaments.map((tournament) => (
              <div key={tournament.id} className="bg-white rounded-lg shadow hover:shadow-lg transition-shadow p-6">
                <div className="flex flex-col lg:flex-row lg:items-center justify-between">
                  {/* Tournament Info */}
                  <div className="flex items-start space-x-4 mb-4 lg:mb-0">
                    {/* Status Icon */}
                    <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-xl ${
                      tournament.result?.position === 1 ? 'bg-yellow-500' :
                      tournament.result?.position <= 3 ? 'bg-gray-400' :
                      tournament.result && tournament.result.payout > 0 ? 'bg-green-500' :
                      tournament.result ? 'bg-red-500' : 'bg-blue-500'
                    }`}>
                      {tournament.result ? 
                        (tournament.result.position === 1 ? 'ü•á' : 
                         tournament.result.position === 2 ? 'ü•à' : 
                         tournament.result.position === 3 ? 'ü•â' : 
                         tournament.result.payout > 0 ? 'üí∞' : '‚ùå') : '‚è≥'}
                    </div>
                    
                    {/* Tournament Details */}
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <h3 className="text-xl font-bold text-gray-900">
                          {tournament.name}
                        </h3>
                        <span className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-xs font-medium">
                          {tournament.tournamentType}
                        </span>
                      </div>
                      
                      <div className="flex flex-wrap items-center gap-4 text-sm text-gray-600">
                        <span>üìÖ {new Date(tournament.date).toLocaleDateString('ru-RU')}</span>
                        <span>üè® {tournament.venue}</span>
                        <span>üíµ –ë–∞–π-–∏–Ω: ${tournament.buyin}</span>
                        {tournament.participants && (
                          <span>üë• {tournament.participants} –∏–≥—Ä–æ–∫–æ–≤</span>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Result Info */}
                  <div className="flex flex-col lg:items-end space-y-2">
                    {tournament.result ? (
                      <div className="flex items-center space-x-4">
                        <div className="text-right">
                          <div className="text-sm text-gray-500">–ú–µ—Å—Ç–æ</div>
                          <div className="text-lg font-bold text-gray-900">
                            #{tournament.result.position}
                          </div>
                        </div>
                        
                        <div className="text-right">
                          <div className="text-sm text-gray-500">–í—ã–∏–≥—Ä—ã—à</div>
                          <div className={`text-lg font-bold ${
                            tournament.result.payout > 0 ? 'text-green-600' : 'text-gray-500'
                          }`}>
                            {tournament.result.payout > 0 ? `$${tournament.result.payout}` : '–ë–µ–∑ –ø—Ä–∏–∑–æ–≤'}
                          </div>
                        </div>
                        
                        <div className="text-right">
                          <div className="text-sm text-gray-500">ROI</div>
                          <div className={`text-lg font-bold ${
                            tournament.result.roi > 0 ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {tournament.result.roi > 0 ? '+' : ''}{tournament.result.roi.toFixed(1)}%
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="text-center lg:text-right">
                        <div className="text-blue-600 font-semibold">–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π</div>
                        <div className="text-sm text-gray-500">
                          {new Date(tournament.date).toLocaleDateString('ru-RU')}
                        </div>
                      </div>
                    )}
                    
                    {/* Action Buttons */}
                    <div className="flex space-x-2 mt-4">
                      <button 
                        onClick={() => router.push(`/tournaments/${tournament.id}`)}
                        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors text-sm"
                      >
                        üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                      </button>
                      <button 
                        onClick={() => router.push(`/tournaments/${tournament.id}/edit`)}
                        className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors text-sm"
                      >
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                      {(() => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∫–∞–∫ –≤ –±–æ—Ç–µ)
                        const hasResult = !!(
                          tournament.result || 
                          (Array.isArray(tournament.tournament_results) && tournament.tournament_results.length > 0) ||
                          (tournament.tournament_results && 
                           typeof tournament.tournament_results === 'object' && 
                           !Array.isArray(tournament.tournament_results) &&
                           tournament.tournament_results !== null &&
                           Object.keys(tournament.tournament_results).length > 0)
                        );
                        
                        console.warn('[WEB] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è', tournament.name, ':', hasResult);
                        
                        return hasResult ? (
                          <button 
                            onClick={() => router.push(`/tournaments/${tournament.id}#edit-result`)}
                            className="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600 transition-colors text-sm"
                          >
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                          </button>
                        ) : (
                          <button 
                            onClick={() => router.push(`/tournaments/${tournament.id}#add-result`)}
                            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors text-sm"
                          >
                            ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                          </button>
                        );
                      })()}
                      <button 
                        onClick={() => handleDeleteTournament(tournament)}
                        className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors text-sm"
                        title="–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>

        {/* Back to Home */}
        <div className="mt-8 text-center">
          <button
            onClick={() => router.push('/')}
            className="bg-gray-500 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition-colors"
          >
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    </div>
  )
}