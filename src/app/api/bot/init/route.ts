/**
 * API endpoint –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_WEBHOOK_URL
 */

import { type NextRequest, NextResponse } from "next/server";
import { BotSettingsService } from "@/services/botSettingsService";

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...");

    // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botMode = process.env.BOT_MODE || "polling";
    const webhookUrl = process.env.BOT_WEBHOOK_URL || "";
    const botToken = process.env.TELEGRAM_BOT_TOKEN;

    if (!botToken) {
      return NextResponse.json(
        {
          success: false,
          error: "TELEGRAM_BOT_TOKEN not found in environment variables",
        },
        { status: 500 },
      );
    }

    console.log(`üîß –†–µ–∂–∏–º –∏–∑ .env: ${botMode}`);
    console.log(`üîó Webhook URL –∏–∑ .env: ${webhookUrl || "–Ω–µ –∑–∞–¥–∞–Ω"}`);

    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º webhook –∏ URL –∑–∞–¥–∞–Ω - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    if (botMode === "webhook" && webhookUrl) {
      console.log("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è...");

      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ Telegram
        const webhookResponse = await fetch(
          `https://api.telegram.org/bot${botToken}/setWebhook`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              url: webhookUrl,
              allowed_updates: ["message", "callback_query"],
            }),
          },
        );

        const webhookResult = await webhookResponse.json();

        if (!webhookResult.ok) {
          throw new Error(
            `Failed to set webhook: ${webhookResult.description}`,
          );
        }

        console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        try {
          await BotSettingsService.updateSetting("bot_mode", "webhook");
          await BotSettingsService.updateSetting("webhook_url", webhookUrl);
          await BotSettingsService.updateSetting("polling_enabled", false);
          await BotSettingsService.updateSetting("webhook_enabled", true);
          await BotSettingsService.updateBotStatus("active");
          await BotSettingsService.updateLastUpdateTime();
          console.log("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î");
        } catch (dbError) {
          console.log("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Telegram");
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const webhookInfoResponse = await fetch(
          `https://api.telegram.org/bot${botToken}/getWebhookInfo`,
        );
        const webhookInfo = await webhookInfoResponse.json();

        return NextResponse.json({
          success: true,
          message: "–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ webhook —Ä–µ–∂–∏–º–µ",
          mode: "webhook",
          webhookUrl: webhookUrl,
          webhookInfo: webhookInfo.result,
        });
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", error);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
        try {
          await BotSettingsService.updateBotStatus("error");
          await BotSettingsService.incrementErrorCount();
        } catch (dbError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ë–î
        }

        return NextResponse.json(
          {
            success: false,
            error:
              error instanceof Error ? error.message : "Unknown error",
            mode: "webhook",
            webhookUrl: webhookUrl,
          },
          { status: 500 },
        );
      }
    } else if (botMode === "polling") {
      console.log("üîÑ –†–µ–∂–∏–º polling - webhook –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");

      // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      try {
        await fetch(`https://api.telegram.org/bot${botToken}/deleteWebhook`, {
          method: "POST",
        });
        console.log("‚úÖ Webhook —É–¥–∞–ª–µ–Ω (polling —Ä–µ–∂–∏–º)");
      } catch (error) {
        console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook (–≤–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –Ω–µ –±—ã–ª–æ)");
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
      try {
        await BotSettingsService.updateSetting("bot_mode", "polling");
        await BotSettingsService.updateSetting("webhook_url", "");
        await BotSettingsService.updateSetting("polling_enabled", true);
        await BotSettingsService.updateSetting("webhook_enabled", false);
        await BotSettingsService.updateBotStatus("active");
        console.log("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î");
      } catch (dbError) {
        console.log("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
      }

      return NextResponse.json({
        success: true,
        message: "–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ polling —Ä–µ–∂–∏–º–µ",
        mode: "polling",
      });
    } else {
      return NextResponse.json(
        {
          success: false,
          error:
            "BOT_MODE=webhook –Ω–æ BOT_WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_WEBHOOK_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.",
          mode: botMode,
        },
        { status: 400 },
      );
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    );
  }
}

/**
 * GET handler –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export async function GET(request: NextRequest) {
  try {
    const botMode = process.env.BOT_MODE || "polling";
    const webhookUrl = process.env.BOT_WEBHOOK_URL || "";
    const botToken = process.env.TELEGRAM_BOT_TOKEN;

    if (!botToken) {
      return NextResponse.json(
        {
          success: false,
          error: "TELEGRAM_BOT_TOKEN not found",
        },
        { status: 500 },
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook –∏–∑ Telegram
    const webhookInfoResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/getWebhookInfo`,
    );
    const webhookInfo = await webhookInfoResponse.json();

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    let dbSettings = null;
    try {
      dbSettings = await BotSettingsService.getBotSettings();
    } catch (error) {
      console.log("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
    }

    return NextResponse.json({
      success: true,
      environment: {
        BOT_MODE: botMode,
        BOT_WEBHOOK_URL: webhookUrl,
        TELEGRAM_BOT_TOKEN: botToken ? "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
      },
      telegram: {
        webhookInfo: webhookInfo.result,
      },
      database: dbSettings,
      recommendation:
        botMode === "webhook" && !webhookUrl
          ? "‚ö†Ô∏è BOT_MODE=webhook –Ω–æ BOT_WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω"
          : botMode === "webhook" &&
              webhookInfo.result?.url !== webhookUrl
            ? "‚ö†Ô∏è Webhook URL –≤ Telegram –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å BOT_WEBHOOK_URL. –í—ã–∑–æ–≤–∏—Ç–µ POST /api/bot/init –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
            : "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞",
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    );
  }
}

