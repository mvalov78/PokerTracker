/**
 * Webhook endpoint –¥–ª—è Telegram –±–æ—Ç–∞ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
 */

import { type NextRequest, NextResponse } from "next/server";
import { getBotInstance, initializeBot } from "../../../../bot";
import { BotSettingsService } from "@/services/botSettingsService";

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  const requestId = Math.random().toString(36).substring(7);
  
  try {
    console.log(`[Webhook ${requestId}] üöÄ Incoming request`, {
      timestamp: new Date().toISOString(),
      method: request.method,
      url: request.url,
      headers: {
        'content-type': request.headers.get('content-type'),
        'user-agent': request.headers.get('user-agent'),
        'x-telegram-bot-api-secret-token': request.headers.get('x-telegram-bot-api-secret-token') ? 'SET' : 'NOT_SET'
      },
      environment: process.env.NODE_ENV,
      botToken: process.env.TELEGRAM_BOT_TOKEN ? 'SET' : 'NOT_SET',
      webhookUrl: process.env.BOT_WEBHOOK_URL || 'NOT_SET'
    });

    // –ü–æ–ª—É—á–∞–µ–º update –æ—Ç Telegram
    const update = await request.json();

    console.log(`[Webhook ${requestId}] üì® Update received:`, {
      updateId: update.update_id,
      updateType: Object.keys(update).filter(key => key !== 'update_id')[0],
      hasMessage: !!update.message,
      hasCallbackQuery: !!update.callback_query,
      hasInlineQuery: !!update.inline_query,
      fullUpdate: JSON.stringify(update, null, 2)
    });

    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message) {
      console.log(`[Webhook ${requestId}] üí¨ Message details:`, {
        messageId: update.message.message_id,
        from: {
          id: update.message.from?.id,
          username: update.message.from?.username,
          firstName: update.message.from?.first_name,
          isBot: update.message.from?.is_bot
        },
        chat: {
          id: update.message.chat?.id,
          type: update.message.chat?.type,
          title: update.message.chat?.title
        },
        text: update.message.text,
        hasPhoto: !!update.message.photo,
        hasDocument: !!update.message.document,
        date: update.message.date,
        timestamp: new Date(update.message.date * 1000).toISOString()
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    console.log(`[Webhook ${requestId}] ü§ñ Getting bot instance...`);
    let bot = getBotInstance();
    if (!bot) {
      console.log(`[Webhook ${requestId}] üîß Bot not found, initializing...`);
      const initStartTime = Date.now();
      
      // Add timeout protection for bot initialization
      const initPromise = initializeBot();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Bot initialization timeout (15s)')), 15000)
      );
      
      try {
        bot = await Promise.race([initPromise, timeoutPromise]);
        console.log(`[Webhook ${requestId}] ‚úÖ Bot initialized in ${Date.now() - initStartTime}ms`);
        
        // Verify bot status after initialization
        const botStatus = bot.getStatus();
        console.log(`[Webhook ${requestId}] üìä Bot status after init:`, botStatus);
        
      } catch (initError) {
        console.error(`[Webhook ${requestId}] üí• Bot initialization failed:`, {
          error: initError instanceof Error ? initError.message : 'Unknown error',
          stack: initError instanceof Error ? initError.stack : undefined,
          environment: process.env.NODE_ENV,
          botToken: process.env.TELEGRAM_BOT_TOKEN ? 'SET' : 'NOT_SET'
        });
        throw new Error(`Bot initialization failed: ${initError instanceof Error ? initError.message : 'Unknown error'}`);
      }
    } else {
      console.log(`[Webhook ${requestId}] ‚úÖ Using existing bot instance`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    const botStatus = bot.getStatus();
    console.log(`[Webhook ${requestId}] üìä Bot status:`, botStatus);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    console.log(`[Webhook ${requestId}] ‚öôÔ∏è Processing update...`);
    const processStartTime = Date.now();
    
    await bot.handleUpdate(update);
    
    const processingTime = Date.now() - processStartTime;
    console.log(`[Webhook ${requestId}] ‚úÖ Update processed successfully in ${processingTime}ms`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    try {
      await BotSettingsService.updateLastUpdateTime();
      console.log(`[Webhook ${requestId}] üìù Last update time recorded`);
    } catch (dbError) {
      console.error(`[Webhook ${requestId}] ‚ö†Ô∏è Failed to update last update time:`, dbError);
    }

    const totalTime = Date.now() - startTime;
    console.log(`[Webhook ${requestId}] üèÅ Request completed successfully in ${totalTime}ms`);

    return NextResponse.json({ 
      ok: true, 
      processed: true,
      requestId,
      processingTime: totalTime,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    const totalTime = Date.now() - startTime;
    console.error(`[Webhook ${requestId}] üí• Error processing webhook:`, {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      processingTime: totalTime,
      timestamp: new Date().toISOString()
    });

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    try {
      await BotSettingsService.incrementErrorCount();
      console.log(`[Webhook ${requestId}] üìà Error count incremented`);
    } catch (dbError) {
      console.error(`[Webhook ${requestId}] ‚ö†Ô∏è Failed to increment error count:`, dbError);
    }

    return NextResponse.json(
      { 
        error: "Internal server error",
        requestId,
        processingTime: totalTime,
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}

// –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è webhook
export async function GET(request: NextRequest) {
  const requestId = Math.random().toString(36).substring(7);
  
  console.log(`[Webhook GET ${requestId}] üîç Health check request`, {
    timestamp: new Date().toISOString(),
    url: request.url,
    headers: {
      'user-agent': request.headers.get('user-agent'),
      'origin': request.headers.get('origin')
    },
    environment: process.env.NODE_ENV,
    botToken: process.env.TELEGRAM_BOT_TOKEN ? 'SET' : 'NOT_SET',
    webhookUrl: process.env.BOT_WEBHOOK_URL || 'NOT_SET'
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    let bot = getBotInstance();
    let botStatus = null;
    let botInitialized = false;
    
    if (bot) {
      botStatus = bot.getStatus();
      console.log(`[Webhook GET ${requestId}] ü§ñ Bot status:`, botStatus);
    } else {
      console.log(`[Webhook GET ${requestId}] ‚ö†Ô∏è No bot instance found, attempting initialization...`);
      
      try {
        const initStartTime = Date.now();
        bot = await initializeBot();
        botInitialized = true;
        botStatus = bot.getStatus();
        
        console.log(`[Webhook GET ${requestId}] ‚úÖ Bot initialized successfully in ${Date.now() - initStartTime}ms:`, botStatus);
      } catch (initError) {
        console.error(`[Webhook GET ${requestId}] üí• Bot initialization failed:`, {
          error: initError instanceof Error ? initError.message : 'Unknown error',
          stack: initError instanceof Error ? initError.stack : undefined
        });
        // Don't throw error in GET request, just log it
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    let dbSettings = null;
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î
      console.log(`[Webhook GET ${requestId}] üìä Checking database settings...`);
    } catch (dbError) {
      console.error(`[Webhook GET ${requestId}] ‚ùå Database check failed:`, dbError);
    }

    const response = {
      status: "ok",
      timestamp: new Date().toISOString(),
      message: "Telegram webhook endpoint is running",
      requestId,
      environment: process.env.NODE_ENV,
      config: {
        botToken: process.env.TELEGRAM_BOT_TOKEN ? 'SET' : 'NOT_SET',
        webhookUrl: process.env.BOT_WEBHOOK_URL || 'NOT_SET',
        appUrl: process.env.NEXT_PUBLIC_APP_URL || 'NOT_SET'
      },
      bot: {
        hasInstance: !!bot,
        status: botStatus,
        justInitialized: botInitialized
      },
      database: {
        settings: dbSettings
      }
    };

    console.log(`[Webhook GET ${requestId}] ‚úÖ Health check completed:`, response);
    
    return NextResponse.json(response);
    
  } catch (error) {
    console.error(`[Webhook GET ${requestId}] üí• Health check error:`, error);
    
    return NextResponse.json({
      status: "error",
      timestamp: new Date().toISOString(),
      message: "Webhook health check failed",
      requestId,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
