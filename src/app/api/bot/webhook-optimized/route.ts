/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webhook endpoint –¥–ª—è Telegram –±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
 */

import { type NextRequest, NextResponse } from "next/server";
import { getBotInstance, initializeBot } from "../../../../bot";

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    const update = await request.json();
    console.log("üì® [Webhook] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", update.update_id);

    let bot = getBotInstance();
    if (!bot) {
      console.log("ü§ñ [Webhook] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞...");
      bot = await initializeBot();
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    bot.handleUpdate(update).catch(error => {
      console.error("‚ùå [Webhook] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (Telegram —Ç—Ä–µ–±—É–µ—Ç –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç)
    return NextResponse.json({ 
      success: true,
      processed: true,
      updateId: update.update_id,
      processingTime: Date.now() - startTime
    });

  } catch (error) {
    console.error("‚ùå [Webhook] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–ª—è Telegram, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    return NextResponse.json({ 
      success: false,
      error: "Internal processing error",
      processingTime: Date.now() - startTime
    });
  }
}

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è Vercel
export const maxDuration = 10; // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è webhook
