/**
 * API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram —á–µ—Ä–µ–∑ webhook
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ webhook —Ä–µ–∂–∏–º–µ
 */

import { type NextRequest, NextResponse } from "next/server";
import { Telegraf } from "telegraf";
import { BotCommands } from "../../../../bot/commands";
import { PhotoHandler } from "../../../../bot/handlers/photoHandler";
import { BotSessionService } from "../../../../services/botSessionService";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è webhook —Ä–µ–∂–∏–º–∞ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–ª—è serverless)
let webhookBot: Telegraf | null = null;
let commands: BotCommands | null = null;
let photoHandler: PhotoHandler | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
 */
function initializeWebhookBot() {
  if (webhookBot) {
    return webhookBot;
  }

  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken || botToken === "mock-bot-token") {
    console.error("[Telegram Webhook] TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    return null;
  }

  console.warn("[Telegram Webhook] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è webhook —Ä–µ–∂–∏–º–∞...");

  webhookBot = new Telegraf(botToken);
  commands = new BotCommands();
  photoHandler = new PhotoHandler();

  // Middleware –¥–ª—è —Å–µ—Å—Å–∏–π (–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î —á–µ—Ä–µ–∑ BotSessionService)
  webhookBot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId) {
      console.warn(
        "[Telegram Webhook] –ù–µ—Ç userId, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º middleware —Å–µ—Å—Å–∏–∏",
      );
      return next();
    }

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
      const sessionData = await BotSessionService.getSession(userId);
      ctx.session = sessionData;
      console.warn(`[Telegram Webhook] –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î:`, {
        userId,
        currentAction: sessionData.currentAction,
        hasTournamentData: !!sessionData.tournamentData,
        sessionKeys: Object.keys(sessionData),
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      await next();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ –ë–î
      await BotSessionService.updateSession(userId, ctx.session);
      console.warn(`[Telegram Webhook] –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î:`, {
        userId,
        currentAction: ctx.session.currentAction,
        hasTournamentData: !!ctx.session.tournamentData,
      });
    } catch (error) {
      console.error("[Telegram Webhook] Session middleware error:", error);
      // Fallback –Ω–∞ –ø—É—Å—Ç—É—é —Å–µ—Å—Å–∏—é
      ctx.session = {
        userId: userId.toString(),
        currentAction: undefined,
        tournamentData: undefined,
        ocrData: undefined,
      };
      await next();
    }
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
  webhookBot.command("start", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /start");
    await commands!.start(ctx);
  });

  webhookBot.command("link", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /link");
    await commands!.link(ctx);
  });

  webhookBot.command("help", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /help");
    await commands!.help(ctx);
  });

  webhookBot.command("register", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /register");
    await commands!.registerTournament(ctx);
  });

  webhookBot.command("result", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /result");
    await commands!.addResult(ctx);
  });

  webhookBot.command("stats", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /stats");
    await commands!.getStats(ctx);
  });

  webhookBot.command("tournaments", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /tournaments");
    await commands!.listTournaments(ctx);
  });

  webhookBot.command("settings", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /settings");
    await commands!.settings(ctx);
  });

  webhookBot.command("venue", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /venue");
    await commands!.showCurrentVenue(ctx);
  });

  webhookBot.command("setvenue", async (ctx) => {
    console.warn("[Telegram Webhook] –ö–æ–º–∞–Ω–¥–∞ /setvenue");
    await commands!.setCurrentVenue(ctx);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  webhookBot.on("photo", async (ctx) => {
    console.warn("[Telegram Webhook] –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è");
    await photoHandler!.handlePhoto(ctx);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  webhookBot.on("document", async (ctx) => {
    console.warn("[Telegram Webhook] –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç");
    if (ctx.message.document.mime_type?.startsWith("image/")) {
      await photoHandler!.handleDocumentAsPhoto(ctx);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: –≤–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)
  webhookBot.on("text", async (ctx) => {
    const text = ctx.message.text;
    const session = ctx.session;

    console.warn(`[Telegram Webhook] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:`, {
      text,
      userId: ctx.from?.id,
      hasSession: !!session,
      currentAction: session?.currentAction,
      sessionData: session
        ? {
            userId: session.userId,
            currentAction: session.currentAction,
            hasTournamentData: !!session.tournamentData,
          }
        : null,
    });

    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è command handler)
    if (text.startsWith("/")) {
      console.warn("[Telegram Webhook] –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º text handler");
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    if (session?.currentAction === "register_tournament") {
      console.warn("[Telegram Webhook] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞");
      await commands!.handleTournamentRegistration(ctx, text);
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (session?.currentAction === "add_result") {
      console.warn(
        "[Telegram Webhook] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, tournamentId:",
        session.tournamentData?.tournamentId,
      );
      await commands!.handleResultInput(ctx, text);
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
    if (session?.currentAction === "edit_tournament") {
      console.warn("[Telegram Webhook] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞");
      await commands!.handleTournamentEdit(ctx, text);
      return;
    }

    // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    console.warn(
      "[Telegram Webhook] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º help message",
    );
    await ctx.reply(
      "ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–∫–Ω–æ–ø–∫–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
  webhookBot.on("callback_query", async (ctx) => {
    const callbackData = ctx.callbackQuery.data;
    console.warn("[Telegram Webhook] –ü–æ–ª—É—á–µ–Ω callback_query:", callbackData);

    if (!callbackData) {
      await ctx.answerCbQuery("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ callback");
      return;
    }

    // –ü–∞—Ä—Å–∏–º callback data (—Ñ–æ—Ä–º–∞—Ç: action:param1:param2)
    const [action, ...params] = callbackData.split(":");

    try {
      switch (action) {
        case "tournament_select":
          console.warn(
            `[Telegram Webhook] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞: ${params[0]}`,
          );
          await commands!.selectTournament(ctx, params[0]);
          console.warn(`[Telegram Webhook] –ü–æ—Å–ª–µ selectTournament, —Å–µ—Å—Å–∏—è:`, {
            currentAction: ctx.session?.currentAction,
            tournamentId: ctx.session?.tournamentData?.tournamentId,
          });
          break;
        case "result_confirm":
          console.warn(
            `[Telegram Webhook] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${params[0]}`,
          );
          await commands!.confirmResult(ctx, params[0]);
          break;
        case "notification_toggle":
          console.warn(
            `[Telegram Webhook] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${params[0]}`,
          );
          await commands!.toggleNotification(ctx, params[0]);
          break;
        case "confirm_tournament":
          console.warn("[Telegram Webhook] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞");
          await photoHandler!.confirmTournament(ctx);
          break;
        case "cancel_tournament":
          console.warn("[Telegram Webhook] –û—Ç–º–µ–Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞");
          await photoHandler!.cancelTournament(ctx);
          break;
        case "edit_tournament":
          console.warn("[Telegram Webhook] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞");
          await photoHandler!.editTournament(ctx);
          break;
        default:
          console.warn(
            `[Telegram Webhook] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback action: ${action}`,
          );
          await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
      }
    } catch (error) {
      console.error(
        `[Telegram Webhook] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query:`,
        error,
      );
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã");
    }
  });

  console.warn("[Telegram Webhook] –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");

  return webhookBot;
}

/**
 * POST handler –¥–ª—è webhook –æ—Ç Telegram
 * Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—é–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ webhook —Ä–µ–∂–∏–º–µ
 */
export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
    const update = await request.json();

    console.warn("[Telegram Webhook] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", {
      updateId: update.update_id,
      hasMessage: !!update.message,
      hasCallbackQuery: !!update.callback_query,
      timestamp: new Date().toISOString(),
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const bot = initializeWebhookBot();

    if (!bot) {
      console.error("[Telegram Webhook] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞");
      return NextResponse.json(
        {
          ok: false,
          error: "Bot initialization failed - check TELEGRAM_BOT_TOKEN",
        },
        { status: 200 },
      );
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegraf
    await bot.handleUpdate(update);

    console.warn(
      "[Telegram Webhook] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:",
      update.update_id,
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    return NextResponse.json({
      ok: true,
      message: "Update processed successfully",
    });
  } catch (error) {
    console.error("[Telegram Webhook] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", error);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã Telegram –Ω–µ —Å–ø–∞–º–∏–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    return NextResponse.json(
      {
        ok: false,
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 200 },
    );
  }
}

/**
 * GET handler –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook endpoint
 */
export async function GET(request: NextRequest) {
  return NextResponse.json({
    ok: true,
    message: "Telegram webhook endpoint is active",
    timestamp: new Date().toISOString(),
    info: "Send POST requests with Telegram updates to this endpoint",
  });
}
