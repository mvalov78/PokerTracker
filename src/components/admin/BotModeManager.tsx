"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";

interface BotSettings {
  bot_mode: string;
  bot_status: string;
  webhook_url: string;
  polling_enabled: string;
  webhook_enabled: string;
  last_update_time: string;
  error_count: string;
}

interface WebhookInfo {
  url: string;
  has_custom_certificate: boolean;
  pending_update_count: number;
  last_error_date?: number;
  last_error_message?: string;
  max_connections?: number;
  allowed_updates?: string[];
}

export default function BotModeManager() {
  const { user, isAdmin } = useAuth();
  const [settings, setSettings] = useState<BotSettings | null>(null);
  const [webhookInfo, setWebhookInfo] = useState<WebhookInfo | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSwitching, setIsSwitching] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [webhookUrl, setWebhookUrl] = useState("");

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const loadBotSettings = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch("/api/admin/bot-mode");
      const data = await response.json();

      if (data.success) {
        setSettings(data.settings);
        setWebhookInfo(data.webhookInfo);
        setWebhookUrl(
          data.settings.webhook_url ||
            window.location.origin + "/api/bot/webhook",
        );
      } else {
        setError(data.error);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
  const switchMode = async (mode: "polling" | "webhook") => {
    try {
      setIsSwitching(true);
      setError(null);

      const requestBody: any = { mode };
      if (mode === "webhook") {
        requestBody.webhookUrl = webhookUrl;
      }

      const response = await fetch("/api/admin/bot-mode", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();

      if (data.success) {
        await loadBotSettings(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        alert(`‚úÖ ${data.message}`);
      } else {
        setError(data.error);
        alert(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞";
      setError(errorMessage);
      alert(`‚ùå ${errorMessage}`);
    } finally {
      setIsSwitching(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
  const testWebhook = async () => {
    try {
      const response = await fetch(webhookUrl);
      const data = await response.json();

      if (data.status === "ok") {
        alert("‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
      } else {
        alert("‚ùå Webhook –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç");
      }
    } catch (err) {
      alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook");
    }
  };

  useEffect(() => {
    if (isAdmin) {
      loadBotSettings();

      // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      const interval = setInterval(loadBotSettings, 30000);
      return () => clearInterval(interval);
    }
  }, [isAdmin]);

  if (!isAdmin) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <p className="text-red-600">
          –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        </p>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
        <p className="text-center text-gray-600 mt-2">
          –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞...
        </p>
      </div>
    );
  }

  const currentMode = settings?.bot_mode || "unknown";
  const botStatus = settings?.bot_status || "inactive";
  const isPollingMode = currentMode === "polling";
  const isWebhookMode = currentMode === "webhook";

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º
        </h2>
        <p className="text-gray-600">
          –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É polling –∏ webhook —Ä–µ–∂–∏–º–∞–º–∏
        </p>
      </div>

      {/* –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-gray-50 rounded-lg p-4">
            <div className="text-sm font-medium text-gray-500">
              –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            </div>
            <div
              className={`text-lg font-bold ${isPollingMode ? "text-blue-600" : isWebhookMode ? "text-green-600" : "text-gray-600"}`}
            >
              {currentMode === "polling" && "üîÑ Polling"}
              {currentMode === "webhook" && "üîó Webhook"}
              {currentMode === "unknown" && "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
            </div>
          </div>

          <div className="bg-gray-50 rounded-lg p-4">
            <div className="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</div>
            <div
              className={`text-lg font-bold ${
                botStatus === "active"
                  ? "text-green-600"
                  : botStatus === "error"
                    ? "text-red-600"
                    : "text-gray-600"
              }`}
            >
              {botStatus === "active" && "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"}
              {botStatus === "inactive" && "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
              {botStatus === "error" && "‚ùå –û—à–∏–±–∫–∞"}
            </div>
          </div>

          <div className="bg-gray-50 rounded-lg p-4">
            <div className="text-sm font-medium text-gray-500">–û—à–∏–±–∫–∏</div>
            <div
              className={`text-lg font-bold ${
                parseInt(settings?.error_count || "0") > 0
                  ? "text-red-600"
                  : "text-green-600"
              }`}
            >
              {settings?.error_count || "0"} –∑–∞ —á–∞—Å
            </div>
          </div>
        </div>
      </div>

      {/* Webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {isWebhookMode && webhookInfo && (
        <div className="bg-white border border-gray-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            üîó Webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </h3>

          <div className="space-y-2 text-sm">
            <div>
              <strong>URL:</strong>{" "}
              <code className="bg-gray-100 px-2 py-1 rounded">
                {webhookInfo.url}
              </code>
            </div>
            <div>
              <strong>–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong>{" "}
              {webhookInfo.pending_update_count}
            </div>
            <div>
              <strong>–ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</strong>{" "}
              {webhookInfo.max_connections}
            </div>

            {webhookInfo.last_error_date && (
              <div className="bg-red-50 border border-red-200 rounded p-3 mt-4">
                <div>
                  <strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</strong>{" "}
                  {new Date(
                    webhookInfo.last_error_date * 1000,
                  ).toLocaleString()}
                </div>
                <div className="text-red-600">
                  {webhookInfo.last_error_message}
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <p className="text-red-600">‚ùå {error}</p>
        </div>
      )}

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          ‚öôÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
        </h3>

        <div className="space-y-6">
          {/* Polling —Ä–µ–∂–∏–º */}
          <div
            className={`border-2 rounded-lg p-4 ${isPollingMode ? "border-blue-500 bg-blue-50" : "border-gray-200"}`}
          >
            <div className="flex items-center justify-between">
              <div>
                <h4 className="text-lg font-medium text-gray-900">
                  üîÑ Polling —Ä–µ–∂–∏–º
                </h4>
                <p className="text-gray-600">
                  –ë–æ—Ç –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram —Å–µ—Ä–≤–µ—Ä –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                </p>
                <div className="text-sm text-gray-500 mt-2">
                  <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –ü—Ä–æ—Å—Ç–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç
                  –≤–µ–∑–¥–µ
                  <br />
                  <strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> –ë–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤, –∑–∞–¥–µ—Ä–∂–∫–∞ –≤
                  –æ—Ç–≤–µ—Ç–∞—Ö
                </div>
              </div>

              <button
                onClick={() => switchMode("polling")}
                disabled={isSwitching || isPollingMode}
                className={`px-4 py-2 rounded-lg font-medium ${
                  isPollingMode
                    ? "bg-blue-100 text-blue-600 cursor-not-allowed"
                    : "bg-blue-500 text-white hover:bg-blue-600"
                } ${isSwitching ? "opacity-50 cursor-not-allowed" : ""}`}
              >
                {isSwitching
                  ? "‚è≥ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ..."
                  : isPollingMode
                    ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                    : "–í–∫–ª—é—á–∏—Ç—å Polling"}
              </button>
            </div>
          </div>

          {/* Webhook —Ä–µ–∂–∏–º */}
          <div
            className={`border-2 rounded-lg p-4 ${isWebhookMode ? "border-green-500 bg-green-50" : "border-gray-200"}`}
          >
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-lg font-medium text-gray-900">
                    üîó Webhook —Ä–µ–∂–∏–º
                  </h4>
                  <p className="text-gray-600">
                    Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
                  </p>
                  <div className="text-sm text-gray-500 mt-2">
                    <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –º–µ–Ω—å—à–µ
                    —Ä–µ—Å—É—Ä—Å–æ–≤
                    <br />
                    <strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> –¢—Ä–µ–±—É–µ—Ç HTTPS, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                    —Å–ª–æ–∂–Ω–µ–µ
                  </div>
                </div>

                <button
                  onClick={() => switchMode("webhook")}
                  disabled={isSwitching || isWebhookMode}
                  className={`px-4 py-2 rounded-lg font-medium ${
                    isWebhookMode
                      ? "bg-green-100 text-green-600 cursor-not-allowed"
                      : "bg-green-500 text-white hover:bg-green-600"
                  } ${isSwitching ? "opacity-50 cursor-not-allowed" : ""}`}
                >
                  {isSwitching
                    ? "‚è≥ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ..."
                    : isWebhookMode
                      ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                      : "–í–∫–ª—é—á–∏—Ç—å Webhook"}
                </button>
              </div>

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL –¥–ª—è webhook */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Webhook URL:
                </label>
                <div className="flex gap-2">
                  <input
                    type="url"
                    value={webhookUrl}
                    onChange={(e) => setWebhookUrl(e.target.value)}
                    placeholder="https://your-app.vercel.app/api/bot/webhook"
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  />
                  <button
                    onClick={testWebhook}
                    className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                  >
                    üß™ –¢–µ—Å—Ç
                  </button>
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ POST –∑–∞–ø—Ä–æ—Å—ã
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </h3>

        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <div className="font-medium text-gray-900">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
              </div>
              <div className="text-sm text-gray-600">
                –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
              </div>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={settings?.auto_restart === "true"}
                onChange={(e) =>
                  updateSetting("auto_restart", e.target.checked.toString())
                }
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>
        </div>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          üéÆ –î–µ–π—Å—Ç–≤–∏—è
        </h3>

        <div className="flex flex-wrap gap-3">
          <button
            onClick={loadBotSettings}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          </button>

          <button
            onClick={() => window.open("/api/bot/webhook", "_blank")}
            className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
          >
            üß™ –¢–µ—Å—Ç webhook
          </button>

          <button
            onClick={() => restartBot()}
            disabled={isSwitching}
            className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50"
          >
            üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
          </button>

          <button
            onClick={() => viewLogs()}
            className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600"
          >
            üìã –õ–æ–≥–∏ –±–æ—Ç–∞
          </button>
        </div>
      </div>

      {/* –°–ø—Ä–∞–≤–∫–∞ */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-blue-900 mb-4">üí° –°–ø—Ä–∞–≤–∫–∞</h3>

        <div className="space-y-3 text-sm text-blue-800">
          <div>
            <strong>Polling —Ä–µ–∂–∏–º:</strong> –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏
            —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ë–æ—Ç —Å–∞–º –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram —Å–µ—Ä–≤–µ—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö
            —Å–æ–æ–±—â–µ–Ω–∏–π.
          </div>

          <div>
            <strong>Webhook —Ä–µ–∂–∏–º:</strong> –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.
            Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ HTTPS.
          </div>

          <div>
            <strong>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ:</strong> –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–≤ –±–æ—Ç
            –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
          </div>
        </div>
      </div>
    </div>
  );

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  async function updateSetting(key: string, value: string) {
    try {
      const response = await fetch("/api/admin/bot-settings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ settingKey: key, settingValue: value }),
      });

      const data = await response.json();

      if (data.success) {
        await loadBotSettings();
      } else {
        alert(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${data.error}`);
      }
    } catch (err) {
      alert(`–û—à–∏–±–∫–∞: ${err instanceof Error ? err.message : "Unknown error"}`);
    }
  }

  async function restartBot() {
    if (confirm("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞? –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.")) {
      await switchMode(currentMode as "polling" | "webhook");
    }
  }

  function viewLogs() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ª–æ–≥–∞–º
    alert("–õ–æ–≥–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ Vercel Dashboard");
  }
}
