/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
 */

import { BotContext } from './index'

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
 */
export function formatCurrency(amount: number, currency: string = 'USD'): string {
  const symbols: Record<string, string> = {
    'USD': '$',
    'EUR': '‚Ç¨',
    'RUB': '‚ÇΩ'
  }
  
  const symbol = symbols[currency] || '$'
  return `${symbol}${amount.toLocaleString()}`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
 */
export function formatPercentage(value: number, decimals: number = 1): string {
  const sign = value > 0 ? '+' : ''
  return `${sign}${value.toFixed(decimals)}%`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è Telegram
 */
export function formatDate(date: string | Date, options?: Intl.DateTimeFormatOptions): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  
  const defaultOptions: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }
  
  return dateObj.toLocaleDateString('ru-RU', { ...defaultOptions, ...options })
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è
 */
export function formatTimeUntil(date: string | Date): string {
  const targetDate = typeof date === 'string' ? new Date(date) : date
  const now = new Date()
  const diffMs = targetDate.getTime() - now.getTime()
  
  if (diffMs < 0) {
    return '–ü—Ä–æ—à–ª–æ'
  }
  
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24))
  const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
  const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60))
  
  if (diffDays > 0) {
    return `—á–µ—Ä–µ–∑ ${diffDays} –¥–Ω. ${diffHours} —á.`
  } else if (diffHours > 0) {
    return `—á–µ—Ä–µ–∑ ${diffHours} —á. ${diffMinutes} –º–∏–Ω.`
  } else {
    return `—á–µ—Ä–µ–∑ ${diffMinutes} –º–∏–Ω.`
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
 */
export function createInlineKeyboard(buttons: Array<Array<{ text: string; data: string }>>): any {
  return {
    inline_keyboard: buttons.map(row => 
      row.map(button => ({
        text: button.text,
        callback_data: button.data
      }))
    )
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
 */
export function createSelectionKeyboard<T>(
  items: T[],
  getLabel: (item: T) => string,
  getValue: (item: T) => string,
  prefix: string = 'select',
  maxPerRow: number = 1
): any {
  const buttons = []
  
  for (let i = 0; i < items.length; i += maxPerRow) {
    const row = items.slice(i, i + maxPerRow).map(item => ({
      text: getLabel(item),
      callback_data: `${prefix}:${getValue(item)}`
    }))
    buttons.push(row)
  }
  
  return { inline_keyboard: buttons }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
 */
export function escapeMarkdown(text: string): string {
  return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&')
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export function getUserInfo(ctx: BotContext): {
  id: string
  username?: string
  firstName?: string
  lastName?: string
  fullName: string
} {
  const user = ctx.from
  
  if (!user) {
    return {
      id: 'unknown',
      fullName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    }
  }
  
  const fullName = [user.first_name, user.last_name]
    .filter(Boolean)
    .join(' ') || user.username || `User ${user.id}`
  
  return {
    id: user.id.toString(),
    username: user.username,
    firstName: user.first_name,
    lastName: user.last_name,
    fullName
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function checkUserAccess(ctx: BotContext, allowedUsers?: string[]): boolean {
  if (!allowedUsers || allowedUsers.length === 0) {
    return true // –î–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –∑–∞–¥–∞–Ω
  }
  
  const userId = ctx.from?.id.toString()
  const username = ctx.from?.username
  
  return !!(userId && allowedUsers.includes(userId)) || 
         !!(username && allowedUsers.includes(`@${username}`))
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function logUserAction(ctx: BotContext, action: string, details?: any) {
  const user = getUserInfo(ctx)
  const timestamp = new Date().toISOString()
  
  console.log(`[Bot Action] ${timestamp} - User: ${user.fullName} (${user.id}) - Action: ${action}`, 
    details ? JSON.stringify(details) : '')
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
 */
export function createProgressBar(current: number, total: number, length: number = 10): string {
  const percentage = Math.min(current / total, 1)
  const filled = Math.round(percentage * length)
  const empty = length - filled
  
  const filledChar = '‚ñà'
  const emptyChar = '‚ñë'
  
  return filledChar.repeat(filled) + emptyChar.repeat(empty)
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
 */
export function generateId(prefix: string = '', length: number = 8): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  let result = prefix
  
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  
  return result
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
 */
export function validateTournamentData(data: any): { valid: boolean; errors: string[] } {
  const errors: string[] = []
  
  if (!data.name || data.name.trim().length === 0) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
  }
  
  if (!data.date || isNaN(new Date(data.date).getTime())) {
    errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞')
  }
  
  if (!data.buyin || isNaN(parseFloat(data.buyin)) || parseFloat(data.buyin) < 0) {
    errors.push('–ë–∞–π-–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
  }
  
  return {
    valid: errors.length === 0,
    errors
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
 */
export function validateTournamentResult(data: any): { valid: boolean; errors: string[] } {
  const errors: string[] = []
  
  if (!data.position || isNaN(parseInt(data.position)) || parseInt(data.position) < 1) {
    errors.push('–ú–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
  }
  
  if (data.payout !== undefined && (isNaN(parseFloat(data.payout)) || parseFloat(data.payout) < 0)) {
    errors.push('–í—ã–∏–≥—Ä—ã—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
  }
  
  return {
    valid: errors.length === 0,
    errors
  }
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
export function parseCommand(text: string): { command: string; args: string[] } {
  const parts = text.trim().split(/\s+/)
  const command = parts[0].toLowerCase()
  const args = parts.slice(1)
  
  return { command, args }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
 */
export function createErrorMessage(error: string, suggestion?: string): string {
  let message = `‚ùå ${error}`
  
  if (suggestion) {
    message += `\n\nüí° ${suggestion}`
  }
  
  return message
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
 */
export function createSuccessMessage(message: string, details?: string): string {
  let result = `‚úÖ ${message}`
  
  if (details) {
    result += `\n\n${details}`
  }
  
  return result
}

/**
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
 */
export function truncateText(text: string, maxLength: number = 4096): string {
  if (text.length <= maxLength) {
    return text
  }
  
  return text.substring(0, maxLength - 3) + '...'
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export function createPaginatedMenu<T>(
  items: T[],
  page: number,
  pageSize: number,
  getLabel: (item: T) => string,
  getValue: (item: T) => string,
  prefix: string = 'page'
): { keyboard: any; hasNext: boolean; hasPrev: boolean } {
  const startIndex = page * pageSize
  const endIndex = Math.min(startIndex + pageSize, items.length)
  const pageItems = items.slice(startIndex, endIndex)
  
  const buttons = pageItems.map(item => [{
    text: getLabel(item),
    callback_data: getValue(item)
  }])
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navButtons = []
  if (page > 0) {
    navButtons.push({
      text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
      callback_data: `${prefix}:${page - 1}`
    })
  }
  
  if (endIndex < items.length) {
    navButtons.push({
      text: '–î–∞–ª–µ–µ ‚ñ∂Ô∏è',
      callback_data: `${prefix}:${page + 1}`
    })
  }
  
  if (navButtons.length > 0) {
    buttons.push(navButtons)
  }
  
  return {
    keyboard: { inline_keyboard: buttons },
    hasNext: endIndex < items.length,
    hasPrev: page > 0
  }
}
