/**
 * –ö–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞ –¥–ª—è PokerTracker Pro
 */

import type { BotContext } from "./index";
import { UserSettingsService } from "@/services/userSettingsService";
import { type Tournament, TournamentFormData } from "../types";

export class BotCommands {
  /**
   * –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
   */
  async start(ctx: BotContext) {
    const welcomeMessage = `
üé∞ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PokerTracker Pro Bot!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ –ø–æ–∫–µ—Ä—É:

üîπ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ç—É—Ä–Ω–∏—Ä—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞
üîπ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ  
üîπ –ü–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/link - –°–≤—è–∑–∞—Ç—å —Å –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç–æ–º
/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
/result - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
/tournaments - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/venue - –¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥–∫–∞
/setvenue <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–æ—â–∞–¥–∫—É
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

**–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É: \`/setvenue PokerStars Live\`
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
3Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
4Ô∏è‚É£ –ü–æ—Å–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

–£–¥–∞—á–∏ –∑–∞ —Å—Ç–æ–ª–∞–º–∏! üçÄ
    `;

    await ctx.reply(welcomeMessage, { parse_mode: "Markdown" });
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /link - —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç–æ–º
   */
  async link(ctx: BotContext) {
    try {
      const args = ctx.message?.text?.split(" ").slice(1) || [];
      const linkingCode = args[0];

      if (!linkingCode) {
        const helpMessage = `
üîó **–°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç–æ–º**

–î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ Telegram —Å –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç–æ–º:

1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç PokerTracker
2Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Telegram
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–æ–¥ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è"
4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É: \`/link –ö–û–î\`

**–ü—Ä–∏–º–µ—Ä:** \`/link ABC123XY\`

–ü–æ—Å–ª–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ—Ç, –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –≤–∞—à–µ–º—É –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç—É! üéØ
        `;

        await ctx.reply(helpMessage, { parse_mode: "Markdown" });
        return;
      }

      const telegramId = ctx.from?.id;
      if (!telegramId) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID");
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
      const response = await fetch("http://localhost:3000/api/telegram/link", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          telegramId: telegramId.toString(),
          linkingCode: linkingCode,
        }),
      });

      const result = await response.json();

      if (result.success) {
        const successMessage = `
‚úÖ **–ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã!**

üé≠ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${result.user.username}
üÜî **Telegram ID:** ${telegramId}

–¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ—Ç, –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –≤–∞—à–µ–º—É –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç—É.

üéØ **–ß—Ç–æ –¥–∞–ª—å—à–µ?**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tournaments –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ /settings

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PokerTracker Pro! üöÄ
        `;

        await ctx.reply(successMessage, { parse_mode: "Markdown" });
      } else {
        let errorMessage = "‚ùå **–û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤**\n\n";

        switch (result.error) {
          case "Invalid linking code":
            errorMessage +=
              "üîç **–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è**\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
            break;
          case "Linking code has expired":
            errorMessage +=
              "‚è∞ **–ö–æ–¥ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫**\n\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.";
            break;
          case "Linking code has already been used":
            errorMessage +=
              "üîÑ **–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω**\n\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.";
            break;
          case "This Telegram account is already linked to another user":
            errorMessage +=
              "üë• **–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω**\n\n–≠—Ç–æ—Ç Telegram —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.";
            break;
          default:
            errorMessage += `üí• **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:** ${result.error}`;
            break;
        }

        errorMessage += "\n\nüí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n";
        errorMessage += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞\n";
        errorMessage += "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ\n";
        errorMessage += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö";

        await ctx.reply(errorMessage, { parse_mode: "Markdown" });
      }
    } catch (error) {
      console.error("Error in link command:", error);
      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      );
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
   */
  async help(ctx: BotContext) {
    console.log("üìñ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ help(), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É...");

    const helpMessage = `
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º PokerTracker Pro Bot**

**üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤:**
/register - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç—É—Ä–Ω–∏—Ä–∞
üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞ - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

**üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
/result - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
/tournaments - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤

**üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã

**üè® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∞–º–∏:**
/venue - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–ª–æ—â–∞–¥–∫—É
/setvenue <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤

**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

**üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üí° –°–æ–≤–µ—Ç—ã:**
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –±–∏–ª–µ—Ç—ã —á–µ—Ç–∫–æ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –æ–¥–∏–Ω —Ä–∞–∑: \`/setvenue PokerStars Live\`
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    `;

    try {
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...");
      await ctx.reply(helpMessage, { parse_mode: "Markdown" });
      console.log("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ markdown
      try {
        await ctx.reply(
          "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º PokerTracker Pro Bot\n\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞\n/result - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/tournaments - –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤\n/venue - –¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥–∫–∞\n/setvenue <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–æ—â–∞–¥–∫—É\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        );
        console.log("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
      } catch (simpleError) {
        console.error(
          "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏:",
          simpleError,
        );
      }
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /register - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç—É—Ä–Ω–∏—Ä–∞
   */
  async registerTournament(ctx: BotContext) {
    ctx.session!.currentAction = "register_tournament";
    ctx.session!.tournamentData = {};

    const message = `
üé∞ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ | –î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì) | –ë–∞–π-–∏–Ω | –ü–ª–æ—â–∞–¥–∫–∞\`

**–ü—Ä–∏–º–µ—Ä:**
\`Sunday Special | 15.12.2024 | 500 | Aria Casino\`

–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel
    `;

    await ctx.reply(message, { parse_mode: "Markdown" });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
   */
  async handleTournamentRegistration(ctx: BotContext, text: string) {
    if (text === "/cancel") {
      ctx.session!.currentAction = undefined;
      ctx.session!.tournamentData = undefined;
      await ctx.reply("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      return;
    }

    try {
      // –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const parts = text.split("|").map((part) => part.trim());

      if (parts.length < 4) {
        await ctx.reply(
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n" +
            "`–ù–∞–∑–≤–∞–Ω–∏–µ | –î–∞—Ç–∞ | –ë–∞–π-–∏–Ω | –ü–ª–æ—â–∞–¥–∫–∞`",
          { parse_mode: "Markdown" },
        );
        return;
      }

      const [name, dateStr, buyinStr, venue] = parts;
      const buyin = parseFloat(buyinStr);

      if (isNaN(buyin)) {
        await ctx.reply("‚ùå –ë–∞–π-–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)");
        return;
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
      const dateParts = dateStr.split(".");
      if (dateParts.length !== 3) {
        await ctx.reply("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì");
        return;
      }

      const [day, month, year] = dateParts.map((p) => parseInt(p));
      const date = new Date(year, month - 1, day);

      if (isNaN(date.getTime())) {
        await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞");
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
      const tournamentData: Partial<Tournament> = {
        name,
        date: date.toISOString(),
        buyin,
        venue,
        tournamentType: "freezeout", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        structure: "NL Hold'em",
      };

      const userId = ctx.from?.id.toString() || "user-1";
      const newTournament = addTournament(tournamentData, userId);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      ctx.session!.currentAction = undefined;
      ctx.session!.tournamentData = undefined;

      const successMessage = `
‚úÖ **–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!**

üé∞ **${newTournament.name}**
üìÖ ${new Date(newTournament.date).toLocaleDateString("ru-RU")}
üíµ –ë–∞–π-–∏–Ω: $${newTournament.buyin}
üè® ${newTournament.venue}

ID —Ç—É—Ä–Ω–∏—Ä–∞: \`${newTournament.id}\`

–ü–æ—Å–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /result –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
      `;

      await ctx.reply(successMessage, { parse_mode: "Markdown" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /result - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
   */
  async addResult(ctx: BotContext) {
    try {
      const userId = ctx.from?.id.toString() || "user-1";

      // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã —á–µ—Ä–µ–∑ API
      const apiResponse = await fetch(
        `http://localhost:3000/api/tournaments?userId=${userId}`,
      );
      if (!apiResponse.ok) {
        throw new Error(`API error: ${apiResponse.status}`);
      }

      const apiResult = await apiResponse.json();
      if (!apiResult.success) {
        throw new Error("Failed to fetch tournaments via API");
      }

      const tournaments = apiResult.tournaments;
      const tournamentsWithoutResults = tournaments.filter(
        (t: any) => !t.result,
      );

      if (tournamentsWithoutResults.length === 0) {
        await ctx.reply("üìù –£ –≤–∞—Å –Ω–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.");
        return;
      }

      const message = "üèÜ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**\n\n";

      const keyboard = tournamentsWithoutResults
        .slice(0, 10)
        .map((tournament) => [
          {
            text: `üé∞ ${tournament.name} ($${tournament.buyin})`,
            callback_data: `tournament_select:${tournament.id}`,
          },
        ]);

      await ctx.reply(message, {
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤.");
    }
  }

  /**
   * –í—ã–±–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  async selectTournament(ctx: BotContext, tournamentId: string) {
    ctx.session!.currentAction = "add_result";
    ctx.session!.tournamentData = { tournamentId };

    await ctx.answerCbQuery();

    const message = `
üèÜ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞**

–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–ú–µ—Å—Ç–æ | –í—ã–∏–≥—Ä—ã—à\`

**–ü—Ä–∏–º–µ—Ä—ã:**
\`1 | 2500\` - 1 –º–µ—Å—Ç–æ, –≤—ã–∏–≥—Ä—ã—à $2500
\`15 | 0\` - 15 –º–µ—Å—Ç–æ, –±–µ–∑ –ø—Ä–∏–∑–æ–≤—ã—Ö
\`3 | 850\` - 3 –º–µ—Å—Ç–æ, –≤—ã–∏–≥—Ä—ã—à $850

–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel
    `;

    await ctx.reply(message, { parse_mode: "Markdown" });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  async handleResultInput(ctx: BotContext, text: string) {
    if (text === "/cancel") {
      ctx.session!.currentAction = undefined;
      ctx.session!.tournamentData = undefined;
      await ctx.reply("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
      return;
    }

    try {
      const parts = text.split("|").map((part) => part.trim());

      if (parts.length !== 2) {
        await ctx.reply(
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n" + "`–ú–µ—Å—Ç–æ | –í—ã–∏–≥—Ä—ã—à`",
          { parse_mode: "Markdown" },
        );
        return;
      }

      const [positionStr, payoutStr] = parts;
      const position = parseInt(positionStr);
      const payout = parseFloat(payoutStr);

      if (isNaN(position) || position < 1) {
        await ctx.reply("‚ùå –ú–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
        return;
      }

      if (isNaN(payout) || payout < 0) {
        await ctx.reply("‚ùå –í—ã–∏–≥—Ä—ã—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (0 –∏–ª–∏ –±–æ–ª—å—à–µ)");
        return;
      }

      const tournamentId = ctx.session!.tournamentData.tournamentId;

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ API
      const resultData = {
        position,
        payout,
        notes: "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞",
      };

      // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–µ—Ä–µ–∑ API
      const updateResponse = await fetch(
        `http://localhost:3000/api/tournaments/${tournamentId}`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            result: resultData,
          }),
        },
      );

      if (!updateResponse.ok) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞");
        return;
      }

      const updateResult = await updateResponse.json();
      if (!updateResult.success) {
        await ctx.reply("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const updatedTournament = updateResult.tournament;
      if (!updatedTournament) {
        await ctx.reply("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      ctx.session!.currentAction = undefined;
      ctx.session!.tournamentData = undefined;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ result –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
      const result = updatedTournament.result || {
        position,
        payout,
        profit: payout - updatedTournament.buyin,
        roi:
          ((payout - updatedTournament.buyin) / updatedTournament.buyin) * 100,
        notes: "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞",
      };

      const roiText =
        result.roi > 0
          ? `+${result.roi.toFixed(1)}%`
          : `${result.roi.toFixed(1)}%`;
      const profitText =
        result.profit > 0
          ? `+$${result.profit}`
          : `-$${Math.abs(result.profit)}`;

      const successMessage = `
‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!**

üé∞ **${updatedTournament.name}**
üèÜ –ú–µ—Å—Ç–æ: ${result.position}
üí∞ –í—ã–∏–≥—Ä—ã—à: $${result.payout}
üìà ROI: ${roiText}
üíµ –ü—Ä–∏–±—ã–ª—å: ${profitText}

–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.
      `;

      await ctx.reply(successMessage, { parse_mode: "Markdown" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", error);
      await ctx.reply(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      );
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async getStats(ctx: BotContext) {
    try {
      const userId = ctx.from?.id.toString();

      // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã —á–µ—Ä–µ–∑ API
      const apiResponse = await fetch(
        `http://localhost:3000/api/tournaments?userId=${userId}`,
      );

      if (!apiResponse.ok) {
        console.error("API response not ok:", apiResponse.status);
        throw new Error("Failed to fetch tournaments via API");
      }

      const apiResult = await apiResponse.json();
      const tournaments = apiResult.tournaments;

      if (!tournaments || tournaments.length === 0) {
        await ctx.reply("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
        return;
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
      const stats = this.calculateStats(tournaments);

      const roiText =
        stats.roi > 0
          ? `+${stats.roi.toFixed(1)}%`
          : `${stats.roi.toFixed(1)}%`;
      const profitText =
        stats.profit > 0 ? `+$${stats.profit}` : `-$${Math.abs(stats.profit)}`;
      const itmRateText = `${stats.itmRate.toFixed(1)}%`;

      const statsMessage = `
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üé∞ **–¢—É—Ä–Ω–∏—Ä—ã:** ${stats.totalTournaments}
üíµ **–û–±—â–∏–π –±–∞–π-–∏–Ω:** $${stats.totalBuyin}
üí∞ **–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à:** $${stats.totalWinnings}
üìà **–ü—Ä–∏–±—ã–ª—å:** ${profitText}
üìä **ROI:** ${roiText}
üèÜ **ITM Rate:** ${itmRateText}

${stats.bestPosition ? `ü•á **–õ—É—á—à–µ–µ –º–µ—Å—Ç–æ:** ${stats.bestPosition}` : ""}
${stats.bestPayout ? `üíé **–õ—É—á—à–∏–π –≤—ã–∏–≥—Ä—ã—à:** $${stats.bestPayout}` : ""}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ —É–ª—É—á—à–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! üöÄ
      `;

      await ctx.reply(statsMessage, { parse_mode: "Markdown" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /tournaments - —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
   */
  async listTournaments(ctx: BotContext) {
    try {
      const userId = ctx.from?.id.toString();

      // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã —á–µ—Ä–µ–∑ API
      const apiResponse = await fetch(
        `http://localhost:3000/api/tournaments?userId=${userId}`,
      );

      if (!apiResponse.ok) {
        console.error("API response not ok:", apiResponse.status);
        throw new Error("Failed to fetch tournaments via API");
      }

      const apiResult = await apiResponse.json();
      const tournaments = apiResult.tournaments;

      if (!tournaments || tournaments.length === 0) {
        await ctx.reply("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.");
        return;
      }

      let message = "üé∞ **–í–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã:**\n\n";

      tournaments.slice(0, 10).forEach((tournament: any, index: number) => {
        const date = new Date(tournament.date).toLocaleDateString("ru-RU");
        const status = tournament.result
          ? `üèÜ ${tournament.result.position} –º–µ—Å—Ç–æ, $${tournament.result.payout}`
          : "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞";

        message += `${index + 1}. **${tournament.name}**\n`;
        message += `   üìÖ ${date} | üíµ $${tournament.buyin}\n`;
        message += `   üè® ${tournament.venue}\n`;
        message += `   ${status}\n\n`;
      });

      if (tournaments.length > 10) {
        message += `_...–∏ –µ—â–µ ${tournaments.length - 10} —Ç—É—Ä–Ω–∏—Ä–æ–≤_\n\n`;
      }

      message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.";

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤.");
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async settings(ctx: BotContext) {
    const message = `
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**

–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
    `;

    const keyboard = [
      [
        {
          text: "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö",
          callback_data: "notification_toggle:reminders",
        },
      ],
      [
        {
          text: "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
          callback_data: "notification_toggle:weekly_stats",
        },
      ],
      [
        {
          text: "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
          callback_data: "notification_toggle:achievements",
        },
      ],
    ];

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  async confirmResult(ctx: BotContext, resultId: string) {
    await ctx.answerCbQuery("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!");
    // –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async toggleNotification(ctx: BotContext, notificationType: string) {
    const types: Record<string, string> = {
      reminders: "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö",
      weekly_stats: "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
      achievements: "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
    };

    const typeName = types[notificationType] || "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è";

    await ctx.answerCbQuery(`${typeName} –≤–∫–ª—é—á–µ–Ω—ã!`);
    await ctx.reply(`‚úÖ ${typeName} –≤–∫–ª—é—á–µ–Ω—ã!`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
   */
  async handleTournamentEdit(ctx: BotContext, text: string) {
    const session = ctx.session!;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (text.toLowerCase() === "done") {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
      await this.finalizeTournamentEdit(ctx);
      return;
    }

    if (text.toLowerCase() === "cancel") {
      // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      session.currentAction = undefined;
      session.tournamentData = undefined;
      await ctx.reply("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
      return;
    }

    // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const match = text.match(/^(\w+):(.+)$/);
    if (!match) {
      await ctx.reply(
        `
‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: \`–ø–æ–ª–µ:–∑–Ω–∞—á–µ–Ω–∏–µ\`

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ \`name:–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\`
‚Ä¢ \`buyin:500\`
‚Ä¢ \`venue:–ù–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞\`

–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ \`done\` –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, \`cancel\` –¥–ª—è –æ—Ç–º–µ–Ω—ã.
      `,
        { parse_mode: "Markdown" },
      );
      return;
    }

    const [, field, value] = match;
    const tournamentData = session.tournamentData;

    if (!tournamentData) {
      await ctx.reply(
        "‚ùå –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.",
      );
      session.currentAction = undefined;
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    switch (field.toLowerCase()) {
      case "name":
        tournamentData.name = value.trim();
        await ctx.reply(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${value.trim()}`);
        break;

      case "date": {
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        const dateValue = this.parseDate(value.trim());
        if (dateValue) {
          tournamentData.date = dateValue;
          await ctx.reply(
            `‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${new Date(dateValue).toLocaleDateString("ru-RU")}`,
          );
        } else {
          await ctx.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î/–ú–ú/–ì–ì–ì–ì",
          );
        }
        break;
      }

      case "buyin": {
        const buyinValue = parseFloat(value.trim());
        if (buyinValue > 0) {
          tournamentData.buyin = buyinValue;
          await ctx.reply(`‚úÖ –ë–∞–π-–∏–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: $${buyinValue}`);
        } else {
          await ctx.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–π-–∏–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
          );
        }
        break;
      }

      case "venue":
        tournamentData.venue = value.trim();
        await ctx.reply(`‚úÖ –ü–ª–æ—â–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${value.trim()}`);
        break;

      default:
        await ctx.reply(
          `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: ${field}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: name, date, buyin, venue`,
        );
        break;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
    session.tournamentData = tournamentData;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ
   */
  private async finalizeTournamentEdit(ctx: BotContext) {
    const session = ctx.session!;
    const tournamentData = session.tournamentData;

    if (!tournamentData) {
      await ctx.reply("‚ùå –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–ª–æ—â–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      const userId = ctx.from?.id.toString();
      const currentVenue = await UserSettingsService.getCurrentVenue(userId!);
      if (currentVenue) {
        tournamentData.venue = currentVenue;
      } else if (
        !tournamentData.venue ||
        tournamentData.venue === "–ù–µ —É–∫–∞–∑–∞–Ω–æ" ||
        tournamentData.venue === "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
      ) {
        tournamentData.venue = "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —á–µ—Ä–µ–∑ API
      const response = await fetch("http://localhost:3000/api/tournaments", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          ...tournamentData,
          userId,
        }),
      });

      if (!response.ok) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        return;
      }

      const result = await response.json();

      if (result.success) {
        const tournament = result.tournament;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        session.currentAction = undefined;
        session.tournamentData = undefined;
        session.ocrData = undefined;

        const successMessage = `
‚úÖ **–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

üé∞ **${tournament.name}**
üìÖ –î–∞—Ç–∞: ${new Date(tournament.date).toLocaleDateString("ru-RU")}
üíµ –ë–∞–π-–∏–Ω: $${tournament.buyin}
üè® –ü–ª–æ—â–∞–¥–∫–∞: ${tournament.venue}

–¢—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        `;

        await ctx.reply(successMessage, { parse_mode: "Markdown" });
      } else {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private parseDate(dateStr: string): string | null {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
    const formats = [
      /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/, // –î–î.–ú–ú.–ì–ì–ì–ì
      /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/, // –î–î/–ú–ú/–ì–ì–ì–ì
      /^(\d{4})-(\d{1,2})-(\d{1,2})$/, // –ì–ì–ì–ì-–ú–ú-–î–î
    ];

    for (const format of formats) {
      const match = dateStr.match(format);
      if (match) {
        let day, month, year;

        if (format === formats[2]) {
          // –ì–ì–ì–ì-–ú–ú-–î–î
          [, year, month, day] = match;
        } else {
          // –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î/–ú–ú/–ì–ì–ì–ì
          [, day, month, year] = match;
        }

        const date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞—è
        if (
          date.getFullYear() == parseInt(year) &&
          date.getMonth() == parseInt(month) - 1 &&
          date.getDate() == parseInt(day)
        ) {
          return date.toISOString();
        }
      }
    }

    return null;
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /venue - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–ª–æ—â–∞–¥–∫—É
   */
  async showCurrentVenue(ctx: BotContext) {
    try {
      const userId = ctx.from?.id.toString();

      if (!userId) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        return;
      }

      const currentVenue = await UserSettingsService.getCurrentVenue(userId);

      if (!currentVenue) {
        await ctx.reply(
          `
üè® **–¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**

–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–æ—â–∞–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
\`/setvenue –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏\`

–ù–∞–ø—Ä–∏–º–µ—Ä: \`/setvenue PokerStars Live\`
        `,
          { parse_mode: "Markdown" },
        );
      } else {
        await ctx.reply(
          `
üè® **–¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥–∫–∞:** ${currentVenue}

–í—Å–µ –Ω–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–æ—â–∞–¥–∫–µ.

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`/setvenue –ù–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞\`
        `,
          { parse_mode: "Markdown" },
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–ª–æ—â–∞–¥–∫–∏:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–æ—â–∞–¥–∫–µ.");
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /setvenue - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–ª–æ—â–∞–¥–∫—É
   */
  async setCurrentVenue(ctx: BotContext) {
    try {
      const userId = ctx.from?.id.toString();

      if (!userId) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
      const messageText = ctx.message?.text || "";
      const command = messageText.split(" ");

      if (command.length < 2) {
        await ctx.reply(
          `
‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`/setvenue –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏\`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ \`/setvenue PokerStars Live\`
‚Ä¢ \`/setvenue Casino Royale\`
‚Ä¢ \`/setvenue –û–Ω–ª–∞–π–Ω PokerStars\`
        `,
          { parse_mode: "Markdown" },
        );
        return;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ (–≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
      const venueName = command.slice(1).join(" ").trim();

      if (venueName.length < 2) {
        await ctx.reply(
          "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).",
        );
        return;
      }

      if (venueName.length > 100) {
        await ctx.reply(
          "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).",
        );
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–æ—â–∞–¥–∫—É
      const updatedSettings = await UserSettingsService.updateCurrentVenue(
        userId,
        venueName,
      );

      if (updatedSettings) {
        await ctx.reply(
          `
‚úÖ **–ü–ª–æ—â–∞–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:** ${venueName}

–í—Å–µ –Ω–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–æ—â–∞–¥–∫–µ.

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π –ø–ª–æ—â–∞–¥–∫–∏: \`/venue\`
        `,
          { parse_mode: "Markdown" },
        );
      } else {
        await ctx.reply(
          "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–æ—â–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–æ—â–∞–¥–∫–∏:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–æ—â–∞–¥–∫–∏.");
    }
  }

  /**
   * –†–∞—Å—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
   */
  private calculateStats(tournaments: any[]) {
    const totalTournaments = tournaments.length;
    let totalBuyin = 0;
    let totalWinnings = 0;
    let itmCount = 0;
    let bestPosition = null;
    let bestPayout = 0;

    tournaments.forEach((tournament) => {
      totalBuyin += tournament.buyin || 0;

      if (tournament.result) {
        totalWinnings += tournament.result.payout || 0;
        itmCount += 1;

        if (
          bestPosition === null ||
          tournament.result.position < bestPosition
        ) {
          bestPosition = tournament.result.position;
        }

        if (tournament.result.payout > bestPayout) {
          bestPayout = tournament.result.payout;
        }
      }
    });

    const profit = totalWinnings - totalBuyin;
    const roi = totalBuyin > 0 ? (profit / totalBuyin) * 100 : 0;
    const itmRate =
      totalTournaments > 0 ? (itmCount / totalTournaments) * 100 : 0;

    return {
      totalTournaments,
      totalBuyin,
      totalWinnings,
      profit,
      roi,
      itmRate,
      bestPosition,
      bestPayout: bestPayout > 0 ? bestPayout : null,
    };
  }
}
