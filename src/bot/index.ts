/**
 * Telegram Bot –¥–ª—è PokerTracker Pro
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞
 * - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
 * 
 * –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: Polling (–æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram)
 */

// –†–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã Telegraf
import { Telegraf, Context } from 'telegraf'
import { message } from 'telegraf/filters'
import { BotCommands } from './commands'
import { PhotoHandler } from './handlers/photoHandler'
import { NotificationService } from './services/notificationService'
import { getBotConfig } from './config'

export interface SessionData {
  userId?: string
  currentAction?: string
  tournamentData?: any
  ocrData?: any
}

export interface BotContext extends Context {
  // –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Context –æ—Ç Telegraf
  session: SessionData
}

class PokerTrackerBot {
  private config: any
  private commands: BotCommands
  private photoHandler: PhotoHandler
  private notificationService: NotificationService
  private isRunning: boolean = false
  private pollingInterval?: NodeJS.Timeout
  private bot?: Telegraf<BotContext>
  private sessions: Map<number, SessionData> = new Map()

  constructor(token?: string) {
    this.config = getBotConfig()
    this.commands = new BotCommands()
    this.photoHandler = new PhotoHandler()
    this.notificationService = new NotificationService()
    
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if (this.config.token && this.config.token !== 'mock-bot-token') {
      console.log('üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º:', this.config.token.substring(0, 10) + '...')
      this.bot = new Telegraf<BotContext>(this.config.token)
      console.log('üìù –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...')
      this.setupBot()
      console.log('ü§ñ PokerTracker Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º')
    } else {
      console.log('ü§ñ PokerTracker Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –º–æ–∫ —Ä–µ–∂–∏–º–µ')
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegraf –±–æ—Ç–∞
   */
  private setupBot() {
    if (!this.bot) return

    // Middleware –¥–ª—è —Å–µ—Å—Å–∏–π (–ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏)
    this.bot.use((ctx, next) => {
      const userId = ctx.from?.id
      if (!userId) return next()
      
      if (!this.sessions.has(userId)) {
        this.sessions.set(userId, {
          userId: userId.toString(),
          currentAction: undefined,
          tournamentData: undefined,
          ocrData: undefined
        })
      }
      
      ctx.session = this.sessions.get(userId)!
      return next()
    })

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.use((ctx, next) => {
      const messageType = ctx.message ? 
        ('text' in ctx.message ? 'text' : 
         'photo' in ctx.message ? 'photo' : 
         'document' in ctx.message ? 'document' : 
         'other') : 'no-message'
      
      console.log(`[Real Bot] Message from ${ctx.from?.username || ctx.from?.id}: ${messageType}`)
      
      if (ctx.message && 'photo' in ctx.message) {
        console.log(`[Real Bot] Photo details: ${ctx.message.photo.length} sizes`)
      }
      
      return next()
    })

    // –ö–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    this.bot.command('start', async (ctx) => {
      try {
        console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start')
        await this.commands.start(ctx)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error)
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start')
      }
    })
    this.bot.command('link', async (ctx) => {
      try {
        console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /link')
        await this.commands.link(ctx)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /link:', error)
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /link')
      }
    })
    this.bot.command('help', async (ctx) => {
      try {
        console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help')
        await this.commands.help(ctx)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help:', error)
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help')
      }
    })
    this.bot.command('register', async (ctx) => {
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /register')
      await this.commands.registerTournament(ctx)
    })
    this.bot.command('result', async (ctx) => {
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /result')
      await this.commands.addResult(ctx)
    })
    this.bot.command('stats', async (ctx) => {
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats')
      await this.commands.getStats(ctx)
    })
    this.bot.command('tournaments', async (ctx) => {
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /tournaments')
      await this.commands.listTournaments(ctx)
    })
    this.bot.command('settings', async (ctx) => {
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /settings')
      await this.commands.settings(ctx)
    })
    this.bot.command('venue', async (ctx) => {
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /venue')
      await this.commands.showCurrentVenue(ctx)
    })
    this.bot.command('setvenue', async (ctx) => {
      console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /setvenue')
      await this.commands.setCurrentVenue(ctx)
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    this.bot.on(message('photo'), async (ctx) => {
      console.log('üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
      console.log('üì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', ctx.message.photo.length)
      await this.photoHandler.handlePhoto(ctx)
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ —Ñ–∞–π–ª—ã)
    this.bot.on(message('document'), async (ctx) => {
      console.log('üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
      console.log('üìÑ MIME type:', ctx.message.document.mime_type)
      console.log('üìÑ –ò–º—è —Ñ–∞–π–ª–∞:', ctx.message.document.file_name)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      if (ctx.message.document.mime_type?.startsWith('image/')) {
        console.log('üì∏ –î–æ–∫—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ')
        await this.photoHandler.handleDocumentAsPhoto(ctx)
      } else {
        await ctx.reply('üìÑ –Ø –ø–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–ª–µ—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω—É–∂–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n' +
                       'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n' +
                       '‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É\n' +
                       '‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏\n' +
                       '‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç JPG, PNG –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
      }
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on(message('text'), this.handleTextMessage.bind(this))

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    this.bot.on('callback_query', this.handleCallbackQuery.bind(this))
  }

  /**
   * –ú–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ polling —Ä–µ–∂–∏–º–µ
   */
  private async processUpdate(update: any) {
    try {
      const ctx = this.createMockContext(update)
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log(`[Bot Polling] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, JSON.stringify(update, null, 2))
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (ctx.message?.text?.startsWith('/')) {
        await this.handleCommand(ctx)
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      else if (ctx.message?.photo) {
        await this.photoHandler.handlePhoto(ctx)
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      else if (ctx.message?.text) {
        await this.handleTextMessage(ctx)
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
      else if (ctx.callbackQuery?.data) {
        await this.handleCallbackQuery(ctx)
      }
      
    } catch (error) {
      console.error('[Bot Polling] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private createMockContext(update: any): BotContext {
    return {
      from: update.message?.from || update.callback_query?.from,
      message: update.message,
      callbackQuery: update.callback_query,
      session: {},
      reply: async (text: string, options?: any) => {
        console.log(`[Bot Reply] ${text}`)
        if (options) {
          console.log(`[Bot Options]`, options)
        }
      },
      answerCbQuery: async (text?: string) => {
        console.log(`[Bot Callback Answer] ${text || 'OK'}`)
      },
      editMessageText: async (text: string, options?: any) => {
        console.log(`[Bot Edit] ${text}`)
      },
      telegram: {
        getFile: async (fileId: string) => ({ file_path: `mock_file_${fileId}` }),
        getFileLink: async (fileId: string) => ({ href: `https://mock.telegram.org/file/${fileId}` }),
        sendMessage: async (userId: string, text: string) => {
          console.log(`[Bot Send] To ${userId}: ${text}`)
        }
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
   */
  private async handleCommand(ctx: BotContext) {
    const command = ctx.message?.text?.split(' ')[0]?.substring(1) // —É–±–∏—Ä–∞–µ–º /
    
    switch (command) {
      case 'start':
        await this.commands.start(ctx)
        break
      case 'help':
        await this.commands.help(ctx)
        break
      case 'register':
        await this.commands.registerTournament(ctx)
        break
      case 'result':
        await this.commands.addResult(ctx)
        break
      case 'stats':
        await this.commands.getStats(ctx)
        break
      case 'tournaments':
        await this.commands.listTournaments(ctx)
        break
      case 'settings':
        await this.commands.settings(ctx)
        break
      default:
        await ctx.reply?.('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.')
    }
  }

  private async handleTextMessage(ctx: BotContext) {
    const text = ctx.message?.text
    const session = ctx.session!
    
    if (!text) return
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    if (session.currentAction === 'register_tournament') {
      await this.commands.handleTournamentRegistration(ctx, text)
      return
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (session.currentAction === 'add_result') {
      await this.commands.handleResultInput(ctx, text)
      return
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
    if (session.currentAction === 'edit_tournament') {
      await this.commands.handleTournamentEdit(ctx, text)
      return
    }
    
    // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply?.(
      'ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
    )
  }

  private async handleCallbackQuery(ctx: BotContext) {
    if (!ctx.callbackQuery?.data) return
    
    const data = ctx.callbackQuery.data
    const [action, ...params] = data.split(':')
    
    switch (action) {
      case 'tournament_select':
        await this.commands.selectTournament(ctx, params[0])
        break
      case 'result_confirm':
        await this.commands.confirmResult(ctx, params[0])
        break
      case 'notification_toggle':
        await this.commands.toggleNotification(ctx, params[0])
        break
      case 'confirm_tournament':
        await this.photoHandler.confirmTournament(ctx)
        break
      case 'cancel_tournament':
        await this.photoHandler.cancelTournament(ctx)
        break
      case 'edit_tournament':
        await this.photoHandler.editTournament(ctx)
        break
      default:
        await ctx.answerCbQuery?.('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ
   */
  public async start() {
    try {
      console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ...')
      
      if (this.isRunning) {
        console.log('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
        return
      }

      this.isRunning = true
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—É—Å–∫ polling
      if (this.config.token && this.config.token !== 'mock-bot-token') {
        await this.startRealPolling()
      } else {
        await this.startMockPolling()
      }
      
      console.log('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ!')
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error)
      this.isRunning = false
      throw error
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ polling (–∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
   */
  private async startRealPolling() {
    if (!this.bot) {
      throw new Error('Bot not initialized with token')
    }

    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram polling...')
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ getMe
      const me = await this.bot.telegram.getMe()
      console.log(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${me.username} (${me.first_name})`)
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ
      console.log('üöÄ –í—ã–∑—ã–≤–∞–µ–º bot.launch() —Å polling –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...')
      await this.bot.launch({
        polling: {
          timeout: 30,
          limit: 100,
          allowed_updates: ['message', 'callback_query']
        }
      })
      console.log('üéØ bot.launch() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      
      console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–π Telegram polling –∑–∞–ø—É—â–µ–Ω!')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      console.log('üëÇ –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è')

      // Graceful shutdown
      process.once('SIGINT', () => this.bot?.stop('SIGINT'))
      process.once('SIGTERM', () => this.bot?.stop('SIGTERM'))
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ polling:', error)
      
      if (error instanceof Error && error.message.includes('404')) {
        console.error('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
        console.error('   - –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞')
        console.error('   - –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –≤ BotFather')
        console.error('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API')
        console.error('üîß –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º–æ–∫ —Ä–µ–∂–∏–º...')
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º–æ–∫ —Ä–µ–∂–∏–º
        this.bot = undefined
        await this.startMockPolling()
        return
      }
      
      throw error
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–∫ polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  private async startMockPolling() {
    console.log('üß™ –ú–æ–∫ polling –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    this.pollingInterval = setInterval(() => {
      this.simulateUpdate()
    }, 30000) // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   */
  private async simulateUpdate() {
    const mockUpdate = {
      update_id: Date.now(),
      message: {
        message_id: Math.floor(Math.random() * 1000),
        from: {
          id: 123456789,
          first_name: 'Test',
          username: 'testuser'
        },
        chat: {
          id: 123456789,
          type: 'private'
        },
        date: Math.floor(Date.now() / 1000),
        text: '/stats'
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if (Math.random() < 0.1) {
      console.log('üì± –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /stats –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      await this.processUpdate(mockUpdate)
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  public async stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...')
    
    this.isRunning = false
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.bot) {
      try {
        this.bot.stop()
        console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:', error)
      }
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ polling
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval)
      this.pollingInterval = undefined
      console.log('‚úÖ –ú–æ–∫ polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }
    
    console.log('‚úÖ Telegram –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
   */
  public getStatus(): { status: string; mode: string; isRunning: boolean } {
    return {
      status: this.isRunning ? 'active' : 'inactive',
      mode: 'polling',
      isRunning: this.isRunning
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  public async sendNotification(userId: string, message: string) {
    try {
      if (this.bot) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
        await this.bot.telegram.sendMessage(userId, message)
        console.log(`[Real Bot Notification] Sent to ${userId}: ${message}`)
      } else {
        // –ú–æ–∫ —Ä–µ–∂–∏–º
        console.log(`[Mock Bot Notification] To ${userId}: ${message}`)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
    }
  }

  public async sendTournamentReminder(userId: string, tournamentName: string, date: string) {
    const message = `üé∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ!\n\n` +
                   `üìÖ ${tournamentName}\n` +
                   `‚è∞ ${date}\n\n` +
                   `–£–¥–∞—á–∏ –∑–∞ —Å—Ç–æ–ª–∞–º–∏! üçÄ`
    
    await this.sendNotification(userId, message)
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è API)
   */
  public async handleUpdate(update: any) {
    await this.processUpdate(update)
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API —Ä–æ—É—Ç–∞—Ö
export { PokerTrackerBot }

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ API)
let botInstance: PokerTrackerBot | null = null

export function getBotInstance(): PokerTrackerBot | null {
  return botInstance
}

export function createBotInstance(token?: string): PokerTrackerBot {
  if (botInstance) {
    return botInstance
  }
  
  botInstance = new PokerTrackerBot(token)
  return botInstance
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
 */
export async function initializeBot() {
  if (!botInstance) {
    botInstance = new PokerTrackerBot()
    
    try {
      await botInstance.start()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error)
    }
  }
  
  return botInstance
}
