/**
 * Telegram Bot –¥–ª—è PokerTracker Pro
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞
 * - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
 *
 * –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: Polling (–æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram)
 */

// –†–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã Telegraf
import { Telegraf, type Context } from "telegraf";
import { message } from "telegraf/filters";
import { BotCommands } from "./commands";
import { PhotoHandler } from "./handlers/photoHandler";
import { NotificationService } from "./services/notificationService";
import { getBotConfig } from "./config";
import { BotSettingsService } from "@/services/botSettingsService";
import { BotSessionService } from "@/services/botSessionService";

export interface SessionData {
  userId?: string;
  currentAction?: string;
  tournamentData?: any;
  ocrData?: any;
}

export interface BotContext extends Context {
  // –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Context –æ—Ç Telegraf
  session: SessionData;
}

class PokerTrackerBot {
  private config: any;
  private commands: BotCommands;
  private photoHandler: PhotoHandler;
  private notificationService: NotificationService;
  private isRunning: boolean = false;
  private pollingInterval?: NodeJS.Timeout;
  private bot?: Telegraf<BotContext>;
  // –°–µ—Å—Å–∏–∏ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î —á–µ—Ä–µ–∑ BotSessionService

  constructor(token?: string) {
    this.config = getBotConfig();
    this.commands = new BotCommands();
    this.photoHandler = new PhotoHandler();
    this.notificationService = new NotificationService();

    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if (this.config.token && this.config.token !== "mock-bot-token") {
      console.warn(
        "üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º:",
        this.config.token.substring(0, 10) + "...",
      );
      this.bot = new Telegraf<BotContext>(this.config.token);
      console.warn("üìù –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...");
      this.setupBot();
      console.warn("ü§ñ PokerTracker Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º");
    } else {
      console.warn("ü§ñ PokerTracker Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –º–æ–∫ —Ä–µ–∂–∏–º–µ");
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegraf –±–æ—Ç–∞
   */
  private setupBot() {
    if (!this.bot) {return;}

    // Middleware –¥–ª—è —Å–µ—Å—Å–∏–π (–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î)
    this.bot.use(async (ctx, next) => {
      const userId = ctx.from?.id;
      if (!userId) {return next();}

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        const sessionData = await BotSessionService.getSession(userId);
        ctx.session = sessionData;
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await next();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ –ë–î
        await BotSessionService.updateSession(userId, ctx.session);
      } catch (error) {
        console.error('Session middleware error:', error);
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å–µ—Å—Å–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        ctx.session = {
          userId: userId.toString(),
          currentAction: undefined,
          tournamentData: undefined,
          ocrData: undefined,
        };
        await next();
      }
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.use((ctx, next) => {
      const messageType = ctx.message
        ? "text" in ctx.message
          ? "text"
          : "photo" in ctx.message
            ? "photo"
            : "document" in ctx.message
              ? "document"
              : "other"
        : "no-message";

      console.warn(
        `[Real Bot] Message from ${ctx.from?.username || ctx.from?.id}: ${messageType}`,
      );

      if (ctx.message && "photo" in ctx.message) {
        console.warn(
          `[Real Bot] Photo details: ${ctx.message.photo.length} sizes`,
        );
      }

      return next();
    });

    // –ö–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    this.bot.command("start", async (ctx) => {
      try {
        console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start");
        await this.commands.start(ctx);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start");
      }
    });
    this.bot.command("link", async (ctx) => {
      try {
        console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /link");
        await this.commands.link(ctx);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /link:", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /link");
      }
    });
    this.bot.command("help", async (ctx) => {
      try {
        console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help");
        await this.commands.help(ctx);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help:", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help");
      }
    });
    this.bot.command("register", async (ctx) => {
      console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /register");
      await this.commands.registerTournament(ctx);
    });
    this.bot.command("result", async (ctx) => {
      console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /result");
      await this.commands.addResult(ctx);
    });
    this.bot.command("stats", async (ctx) => {
      console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats");
      await this.commands.getStats(ctx);
    });
    this.bot.command("tournaments", async (ctx) => {
      console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /tournaments");
      await this.commands.listTournaments(ctx);
    });
    this.bot.command("settings", async (ctx) => {
      console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /settings");
      await this.commands.settings(ctx);
    });
    this.bot.command("venue", async (ctx) => {
      console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /venue");
      await this.commands.showCurrentVenue(ctx);
    });
    this.bot.command("setvenue", async (ctx) => {
      console.warn("ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /setvenue");
      await this.commands.setCurrentVenue(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    this.bot.on(message("photo"), async (ctx) => {
      console.warn("üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
      console.warn("üì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:", ctx.message.photo.length);
      await this.photoHandler.handlePhoto(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ —Ñ–∞–π–ª—ã)
    this.bot.on(message("document"), async (ctx) => {
      console.warn("üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
      console.warn("üìÑ MIME type:", ctx.message.document.mime_type);
      console.warn("üìÑ –ò–º—è —Ñ–∞–π–ª–∞:", ctx.message.document.file_name);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      if (ctx.message.document.mime_type?.startsWith("image/")) {
        console.warn("üì∏ –î–æ–∫—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ");
        await this.photoHandler.handleDocumentAsPhoto(ctx);
      } else {
        await ctx.reply(
          "üìÑ –Ø –ø–æ–ª—É—á–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–ª–µ—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω—É–∂–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n" +
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É\n" +
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏\n" +
            "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç JPG, PNG –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on(message("text"), this.handleTextMessage.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    this.bot.on("callback_query", this.handleCallbackQuery.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è webhook –∏ polling —Ä–µ–∂–∏–º–æ–≤)
   */
  private async processUpdate(update: any) {
    const updateId = Math.random().toString(36).substring(7);
    const startTime = Date.now();
    
    try {
      console.warn(`[Bot Update ${updateId}] üöÄ Processing update`, {
        updateId: update.update_id,
        updateType: Object.keys(update).filter(key => key !== 'update_id')[0],
        timestamp: new Date().toISOString(),
        botMode: this.isRunning ? 'running' : 'stopped',
        hasRealBot: !!this.bot
      });

      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (update.message) {
        console.warn(`[Bot Update ${updateId}] üí¨ Message received:`, {
          messageId: update.message.message_id,
          from: {
            id: update.message.from?.id,
            username: update.message.from?.username,
            firstName: update.message.from?.first_name
          },
          chat: {
            id: update.message.chat?.id,
            type: update.message.chat?.type
          },
          text: update.message.text,
          hasPhoto: !!update.message.photo,
          hasDocument: !!update.message.document
        });
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–æ—Ç (Telegraf), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (this.bot) {
        console.warn(`[Bot Update ${updateId}] ü§ñ Using Telegraf bot for processing`);
        const processStartTime = Date.now();
        
        await this.bot.handleUpdate(update);
        
        const processTime = Date.now() - processStartTime;
        console.warn(`[Bot Update ${updateId}] ‚úÖ Telegraf processing completed in ${processTime}ms`);
      } else {
        // Fallback –Ω–∞ –º–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫—É
        console.warn(`[Bot Update ${updateId}] üîß Using fallback mock processing`);
        const ctx = await this.createMockContext(update);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
        let handlerType = 'unknown';
        const handlerStartTime = Date.now();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (ctx.message?.text?.startsWith("/")) {
          handlerType = 'command';
          console.warn(`[Bot Update ${updateId}] ‚ö° Handling command: ${ctx.message.text}`);
          await this.handleCommand(ctx);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        else if (ctx.message?.photo) {
          handlerType = 'photo';
          console.warn(`[Bot Update ${updateId}] üì∏ Handling photo upload`);
          await this.photoHandler.handlePhoto(ctx);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        else if (ctx.message?.text) {
          handlerType = 'text';
          console.warn(`[Bot Update ${updateId}] üí≠ Handling text message: "${ctx.message.text}"`);
          await this.handleTextMessage(ctx);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        else if (ctx.callbackQuery?.data) {
          handlerType = 'callback';
          console.warn(`[Bot Update ${updateId}] üîò Handling callback query: ${ctx.callbackQuery.data}`);
          await this.handleCallbackQuery(ctx);
        }
        
        const handlerTime = Date.now() - handlerStartTime;
        console.warn(`[Bot Update ${updateId}] ‚úÖ ${handlerType} handler completed in ${handlerTime}ms`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –º–æ–∫ —Ä–µ–∂–∏–º–∞)
        const userId = ctx.from?.id;
        if (userId) {
          await BotSessionService.updateSession(userId, ctx.session);
        }
      }

      const totalTime = Date.now() - startTime;
      console.warn(`[Bot Update ${updateId}] üèÅ Update processing completed successfully in ${totalTime}ms`);
      
    } catch (error) {
      const totalTime = Date.now() - startTime;
      console.error(`[Bot Update ${updateId}] üí• Error processing update:`, {
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        updateData: JSON.stringify(update, null, 2),
        processingTime: totalTime,
        timestamp: new Date().toISOString()
      });
      
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (update.message?.from?.id) {
        try {
          console.warn(`[Bot Update ${updateId}] üì§ Attempting to send error message to user`);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        } catch (replyError) {
          console.error(`[Bot Update ${updateId}] ‚ùå Failed to send error message:`, replyError);
        }
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private async createMockContext(update: any): Promise<BotContext> {
    const userId = update.message?.from?.id || update.callback_query?.from?.id;
    let session: SessionData = { userId: userId?.toString() };
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
    if (userId) {
      try {
        session = await BotSessionService.getSession(userId);
      } catch (error) {
        console.error('Error loading session for mock context:', error);
      }
    }
    
    return {
      from: update.message?.from || update.callback_query?.from,
      message: update.message,
      callbackQuery: update.callback_query,
      session,
      reply: async (text: string, options?: any) => {
        console.warn(`[Bot Reply] ${text}`);
        if (options) {
          console.warn(`[Bot Options]`, options);
        }
      },
      answerCbQuery: async (text?: string) => {
        console.warn(`[Bot Callback Answer] ${text || "OK"}`);
      },
      editMessageText: async (text: string, options?: any) => {
        console.warn(`[Bot Edit] ${text}`);
      },
      telegram: {
        getFile: async (fileId: string) => ({
          file_path: `mock_file_${fileId}`,
        }),
        getFileLink: async (fileId: string) => ({
          href: `https://mock.telegram.org/file/${fileId}`,
        }),
        sendMessage: async (userId: string, text: string) => {
          console.warn(`[Bot Send] To ${userId}: ${text}`);
        },
      },
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
   */
  private async handleCommand(ctx: BotContext) {
    const command = ctx.message?.text?.split(" ")[0]?.substring(1); // —É–±–∏—Ä–∞–µ–º /

    switch (command) {
      case "start":
        await this.commands.start(ctx);
        break;
      case "help":
        await this.commands.help(ctx);
        break;
      case "register":
        await this.commands.registerTournament(ctx);
        break;
      case "result":
        await this.commands.addResult(ctx);
        break;
      case "stats":
        await this.commands.getStats(ctx);
        break;
      case "tournaments":
        await this.commands.listTournaments(ctx);
        break;
      case "settings":
        await this.commands.settings(ctx);
        break;
      default:
        await ctx.reply?.(
          "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        );
    }
  }

  private async handleTextMessage(ctx: BotContext) {
    const text = ctx.message?.text;
    const session = ctx.session!;

    if (!text) {return;}

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    if (session.currentAction === "register_tournament") {
      await this.commands.handleTournamentRegistration(ctx, text);
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (session.currentAction === "add_result") {
      await this.commands.handleResultInput(ctx, text);
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
    if (session.currentAction === "edit_tournament") {
      await this.commands.handleTournamentEdit(ctx, text);
      return;
    }

    // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply?.(
      "ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
    );
  }

  private async handleCallbackQuery(ctx: BotContext) {
    if (!ctx.callbackQuery?.data) {return;}

    const data = ctx.callbackQuery.data;
    const [action, ...params] = data.split(":");

    switch (action) {
      case "tournament_select":
        await this.commands.selectTournament(ctx, params[0]);
        break;
      case "result_confirm":
        await this.commands.confirmResult(ctx, params[0]);
        break;
      case "notification_toggle":
        await this.commands.toggleNotification(ctx, params[0]);
        break;
      case "confirm_tournament":
        await this.photoHandler.confirmTournament(ctx);
        break;
      case "cancel_tournament":
        await this.photoHandler.cancelTournament(ctx);
        break;
      case "edit_tournament":
        await this.photoHandler.editTournament(ctx);
        break;
      default:
        await ctx.answerCbQuery?.("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∂–∏–º–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  public async start() {
    try {
      console.warn("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...");

      if (this.isRunning) {
        console.warn("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
        return;
      }

      // –ß–∏—Ç–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const botMode = process.env.BOT_MODE || "polling";
      const webhookUrl = process.env.BOT_WEBHOOK_URL || "";
      const autoRestart = process.env.BOT_AUTO_RESTART === "true";

      console.warn(`üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏–∑ .env: ${botMode}`);
      console.warn(`üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: ${autoRestart ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"}`);

      if (webhookUrl) {
        console.warn(`üîó Webhook URL: ${webhookUrl}`);
      }

      this.isRunning = true;

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ë–î (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
      try {
        await BotSettingsService.updateBotStatus("active");
        await BotSettingsService.updateSetting("bot_mode", botMode);
        await BotSettingsService.updateSetting("webhook_url", webhookUrl);
        await BotSettingsService.updateSetting(
          "auto_restart",
          autoRestart.toString(),
        );
        console.warn("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –ë–î");
      } catch (dbError) {
        console.warn("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –ø–æ .env –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º");
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ
      if (this.config.token && this.config.token !== "mock-bot-token") {
        if (botMode === "webhook" && webhookUrl) {
          console.warn("üîó –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ...");
          await this.startWebhookMode(webhookUrl);
        } else if (botMode === "webhook" && !webhookUrl) {
          console.warn(
            "‚ö†Ô∏è Webhook —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω, –Ω–æ URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling.",
          );
          console.warn("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ...");
          await this.startRealPolling();
        } else {
          console.warn("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ...");
          await this.startRealPolling();
        }
      } else {
        console.warn("üß™ –ó–∞–ø—É—Å–∫ –≤ –º–æ–∫ —Ä–µ–∂–∏–º–µ...");
        await this.startMockPolling();
      }

      console.warn("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", error);
      this.isRunning = false;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –≤ –ë–î
      await BotSettingsService.updateBotStatus("error");
      await BotSettingsService.incrementErrorCount();

      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ polling (–∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
   */
  private async startRealPolling() {
    if (!this.bot) {
      throw new Error("Bot not initialized with token");
    }

    try {
      console.warn("üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram polling...");

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ getMe
      const me = await this.bot.telegram.getMe();
      console.warn(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${me.username} (${me.first_name})`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ
      console.warn("üöÄ –í—ã–∑—ã–≤–∞–µ–º bot.launch() —Å polling –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...");
      await this.bot.launch({
        polling: {
          timeout: 30,
          limit: 100,
          allowed_updates: ["message", "callback_query"],
        },
      });
      console.warn("üéØ bot.launch() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");

      console.warn("‚úÖ –†–µ–∞–ª—å–Ω—ã–π Telegram polling –∑–∞–ø—É—â–µ–Ω!");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      console.warn("üëÇ –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è");

      // Graceful shutdown
      process.once("SIGINT", () => this.bot?.stop("SIGINT"));
      process.once("SIGTERM", () => this.bot?.stop("SIGTERM"));
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ polling:", error);

      if (error instanceof Error && error.message.includes("404")) {
        console.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
        console.error("   - –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞");
        console.error("   - –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –≤ BotFather");
        console.error("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API");
        console.error("üîß –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º–æ–∫ —Ä–µ–∂–∏–º...");

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º–æ–∫ —Ä–µ–∂–∏–º
        this.bot = undefined;
        await this.startMockPolling();
        return;
      }

      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ
   */
  private async startWebhookMode(webhookUrl: string) {
    if (!this.bot) {
      throw new Error("Bot not initialized with token");
    }

    try {
      console.warn("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Ä–µ–∂–∏–º–∞...");

      if (!webhookUrl) {
        throw new Error("Webhook URL not provided");
      }

      console.warn(`üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: ${webhookUrl}`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ Telegram
      const result = await this.bot.telegram.setWebhook(webhookUrl, {
        allowed_updates: ["message", "callback_query"],
      });

      if (result) {
        console.warn(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        await BotSettingsService.updateSetting("webhook_enabled", true);
        await BotSettingsService.updateSetting("polling_enabled", false);
        await BotSettingsService.updateLastUpdateTime();

        console.warn("‚úÖ Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
      } else {
        throw new Error("Failed to set webhook");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook —Ä–µ–∂–∏–º–∞:", error);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
      await BotSettingsService.updateBotStatus("error");
      await BotSettingsService.incrementErrorCount();

      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–∫ polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  private async startMockPolling() {
    console.warn("üß™ –ú–æ–∫ polling –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏");

    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    this.pollingInterval = setInterval(() => {
      this.simulateUpdate();
    }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   */
  private async simulateUpdate() {
    const mockUpdate = {
      update_id: Date.now(),
      message: {
        message_id: Math.floor(Math.random() * 1000),
        from: {
          id: 123456789,
          first_name: "Test",
          username: "testuser",
        },
        chat: {
          id: 123456789,
          type: "private",
        },
        date: Math.floor(Date.now() / 1000),
        text: "/stats",
      },
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if (Math.random() < 0.1) {
      console.warn("üì± –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /stats –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      await this.processUpdate(mockUpdate);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  public async stop() {
    console.warn("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...");

    this.isRunning = false;

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
      await BotSettingsService.updateBotStatus("inactive");

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (this.bot) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
          const botMode = await BotSettingsService.getBotMode();

          if (botMode === "webhook") {
            // –£–¥–∞–ª—è–µ–º webhook
            console.warn("üîó –£–¥–∞–ª–µ–Ω–∏–µ webhook...");
            await this.bot.telegram.deleteWebhook();
            await BotSettingsService.updateSetting("webhook_enabled", false);
            console.warn("‚úÖ Webhook —É–¥–∞–ª–µ–Ω");
          }

          this.bot.stop();
          console.warn("‚úÖ –†–µ–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:", error);
          await BotSettingsService.incrementErrorCount();
        }
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫ polling
      if (this.pollingInterval) {
        clearInterval(this.pollingInterval);
        this.pollingInterval = undefined;
        console.warn("‚úÖ –ú–æ–∫ polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      }

      console.warn("‚úÖ Telegram –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:", error);
      await BotSettingsService.updateBotStatus("error");
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
   */
  public getStatus(): { status: string; mode: string; isRunning: boolean } {
    return {
      status: this.isRunning ? "active" : "inactive",
      mode: "polling",
      isRunning: this.isRunning,
    };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  public async sendNotification(userId: string, message: string) {
    try {
      if (this.bot) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
        await this.bot.telegram.sendMessage(userId, message);
        console.warn(`[Real Bot Notification] Sent to ${userId}: ${message}`);
      } else {
        // –ú–æ–∫ —Ä–µ–∂–∏–º
        console.warn(`[Mock Bot Notification] To ${userId}: ${message}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    }
  }

  public async sendTournamentReminder(
    userId: string,
    tournamentName: string,
    date: string,
  ) {
    const message =
      `üé∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ!\n\n` +
      `üìÖ ${tournamentName}\n` +
      `‚è∞ ${date}\n\n` +
      `–£–¥–∞—á–∏ –∑–∞ —Å—Ç–æ–ª–∞–º–∏! üçÄ`;

    await this.sendNotification(userId, message);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è API)
   */
  public async handleUpdate(update: any) {
    await this.processUpdate(update);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API —Ä–æ—É—Ç–∞—Ö
export { PokerTrackerBot };

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ API)
let botInstance: PokerTrackerBot | null = null;

export function getBotInstance(): PokerTrackerBot | null {
  return botInstance;
}

export function createBotInstance(token?: string): PokerTrackerBot {
  if (botInstance) {
    return botInstance;
  }

  botInstance = new PokerTrackerBot(token);
  return botInstance;
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
 */
export async function initializeBot() {
  if (!botInstance) {
    botInstance = new PokerTrackerBot();

    try {
      await botInstance.start();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", error);
    }
  }

  return botInstance;
}
