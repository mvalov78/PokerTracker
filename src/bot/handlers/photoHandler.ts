/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–∏–ª–µ—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–∫ OCR —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

import type { BotContext } from "../index";
import { processTicketImage } from "../../services/ocrService";
import { UserSettingsService } from "@/services/userSettingsService";
import { UserService } from "@/services/userService";

export class PhotoHandler {
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–∏–ª–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
   */
  async handleDocumentAsPhoto(ctx: BotContext) {
    try {
      if (!ctx.message || !("document" in ctx.message)) {
        return;
      }

      const document = ctx.message.document;
      if (!document) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (!document.mime_type?.startsWith("image/")) {
        await ctx.reply(
          "‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞.",
        );
        return;
      }

      await ctx.reply("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞...");

      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
      const fileLink = await ctx.telegram.getFileLink(document.file_id);
      console.warn("üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞:", fileLink.href);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–∫ OCR —Å–µ—Ä–≤–∏—Å
      const ocrResult = await processTicketImage(fileLink.href);
      console.warn("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç OCR –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:", ocrResult);

      if (!ocrResult.success) {
        await ctx.reply(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–∏–ª–µ—Ç–µ.\n\n" +
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
            "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º\n" +
            "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–µ—Å—å –±–∏–ª–µ—Ç –≤–∏–¥–µ–Ω\n" +
            "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ\n\n" +
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞.",
        );
        return;
      }

      const data = ocrResult.data!;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É (—Ç–µ–∫—É—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑ OCR)
      const telegramId = ctx.from?.id.toString() || "user-1";
      console.warn(
        "üîç [handleDocumentAsPhoto] –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–ª–æ—â–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        telegramId,
      );
      const currentVenueDoc =
        await UserSettingsService.getCurrentVenue(telegramId);
      console.warn(
        "üè® [handleDocumentAsPhoto] –¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        currentVenueDoc,
      );
      console.warn("üè® [handleDocumentAsPhoto] –ü–ª–æ—â–∞–¥–∫–∞ –∏–∑ OCR:", data.venue);
      const finalVenueDoc = currentVenueDoc || data.venue || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      console.warn(
        "üè® [handleDocumentAsPhoto] –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        finalVenueDoc,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ (—Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏)
      ctx.session.ocrData = { ...data, venue: finalVenueDoc };
      console.warn(
        "üíæ –î–∞–Ω–Ω—ã–µ OCR –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏ (—Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π):",
        JSON.stringify(ctx.session.ocrData, null, 2),
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let venueTextDoc = finalVenueDoc;
      if (currentVenueDoc && currentVenueDoc !== data.venue) {
        venueTextDoc += ` *(—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è)*`;
      }
      const confirmMessage = `
üì∏ **–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —Å –±–∏–ª–µ—Ç–∞:**

üé∞ **–¢—É—Ä–Ω–∏—Ä:** ${data.name || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}
üìÖ **–î–∞—Ç–∞:** ${data.date ? new Date(data.date).toLocaleDateString("ru-RU") : "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"}
üíµ **–ë–∞–π-–∏–Ω:** $${data.buyin || 0}
üè® **–ü–ª–æ—â–∞–¥–∫–∞:** ${venueTextDoc}
üéØ **–¢–∏–ø:** ${data.tournamentType || "Freezeout"}

–í—Å–µ –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ ‚úÖ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã.
      `;

      const keyboard = [
        [
          { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "confirm_tournament" },
          { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_tournament" },
        ],
        [{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: "edit_tournament" }],
      ];

      await ctx.reply(confirmMessage, {
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", error);

      let errorMessage = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n";

      if (error instanceof Error) {
        if (error.message.includes("file_id")) {
          errorMessage += "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –æ—Ç Telegram.\n";
        } else if (
          error.message.includes("OCR") ||
          error.message.includes("processing")
        ) {
          errorMessage += "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n";
        } else {
          errorMessage += `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}\n`;
        }
      }

      errorMessage += "\nüí° **–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:**\n";
      errorMessage += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑\n";
      errorMessage +=
        "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ –∏ –±–∏–ª–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω\n";
      errorMessage += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /register –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞\n";
      errorMessage +=
        "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è";

      await ctx.reply(errorMessage, { parse_mode: "Markdown" });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
   */
  async handlePhoto(ctx: BotContext) {
    try {
      if (!ctx.message || !("photo" in ctx.message)) {
        return;
      }

      const photos = ctx.message.photo;
      if (!photos || photos.length === 0) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.");
        return;
      }

      // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
      const bestPhoto = photos[photos.length - 1];

      await ctx.reply("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–∏–ª–µ—Ç–∞...");

      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
      const fileLink = await ctx.telegram.getFileLink(bestPhoto.file_id);
      console.warn("üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª:", fileLink.href);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–∫ OCR —Å–µ—Ä–≤–∏—Å
      const ocrResult = await processTicketImage(fileLink.href);
      console.warn("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç OCR:", ocrResult);

      if (!ocrResult.success) {
        await ctx.reply(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–∏–ª–µ—Ç–µ.\n\n" +
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
            "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º\n" +
            "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–µ—Å—å –±–∏–ª–µ—Ç –≤–∏–¥–µ–Ω\n" +
            "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ\n\n" +
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞.",
        );
        return;
      }

      const data = ocrResult.data!;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É (—Ç–µ–∫—É—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑ OCR)
      const telegramId = ctx.from?.id.toString() || "user-1";
      console.warn("üîç –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–ª–æ—â–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", telegramId);
      const currentVenue =
        await UserSettingsService.getCurrentVenue(telegramId);
      console.warn("üè® –¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", currentVenue);
      console.warn("üè® –ü–ª–æ—â–∞–¥–∫–∞ –∏–∑ OCR:", data.venue);
      const finalVenue = currentVenue || data.venue || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      console.warn("üè® –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", finalVenue);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.ocrData = data;
      console.warn(
        "üíæ –î–∞–Ω–Ω—ã–µ OCR —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏:",
        JSON.stringify(data, null, 2),
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let venueText = finalVenue;
      console.warn("üîç [handlePhoto] –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏:");
      console.warn("üîç [handlePhoto] currentVenue:", currentVenue);
      console.warn("üîç [handlePhoto] data.venue:", data.venue);
      console.warn(
        "üîç [handlePhoto] currentVenue !== data.venue:",
        currentVenue !== data.venue,
      );

      if (currentVenue && currentVenue !== data.venue) {
        venueText += ` *(—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è)*`;
        console.warn(
          "üîç [handlePhoto] –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–º–µ—Ç–∫–∞, venueText:",
          venueText,
        );
      } else {
        console.warn("üîç [handlePhoto] –ü–æ–º–µ—Ç–∫–∞ –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω–∞");
      }

      const confirmMessage = `
üì∏ **–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —Å –±–∏–ª–µ—Ç–∞:**

üé∞ **–¢—É—Ä–Ω–∏—Ä:** ${data.name || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}
üìÖ **–î–∞—Ç–∞:** ${data.date ? new Date(data.date).toLocaleDateString("ru-RU") : "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"}
üíµ **–ë–∞–π-–∏–Ω:** $${data.buyin || 0}
üè® **–ü–ª–æ—â–∞–¥–∫–∞:** ${venueText}
üéØ **–¢–∏–ø:** ${data.tournamentType || "Freezeout"}

–í—Å–µ –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ ‚úÖ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã.
      `;

      const keyboard = [
        [
          { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "confirm_tournament" },
          { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_tournament" },
        ],
        [{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: "edit_tournament" }],
      ];

      await ctx.reply(confirmMessage, {
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", error);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      let errorMessage = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n";

      if (error instanceof Error) {
        if (error.message.includes("file_id")) {
          errorMessage += "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –æ—Ç Telegram.\n";
        } else if (
          error.message.includes("OCR") ||
          error.message.includes("processing")
        ) {
          errorMessage += "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n";
        } else {
          errorMessage += `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}\n`;
        }
      }

      errorMessage += "\nüí° **–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:**\n";
      errorMessage += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑\n";
      errorMessage += "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ–µ –∏ –±–∏–ª–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω\n";
      errorMessage += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /register –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞\n";
      errorMessage +=
        "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è";

      await ctx.reply(errorMessage, { parse_mode: "Markdown" });
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ OCR –¥–∞–Ω–Ω—ã—Ö
   */
  async confirmTournament(ctx: BotContext) {
    try {
      await ctx.answerCbQuery();

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
      console.warn("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é:", ctx.session);
      const data = ctx.session.ocrData;
      console.warn("üîç –î–∞–Ω–Ω—ã–µ OCR –∏–∑ —Å–µ—Å—Å–∏–∏:", data);

      if (!data) {
        console.warn("‚ùå –î–∞–Ω–Ω—ã–µ OCR –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏");
        await ctx.reply(
          "‚ùå –î–∞–Ω–Ω—ã–µ OCR –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.",
        );
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —á–µ—Ä–µ–∑ API
      const telegramId = ctx.from?.id.toString() || "user-1";

      // –ü–æ–ª—É—á–∞–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      console.warn(
        "üîç [confirmTournament] –ü–æ–ª—É—á–∞–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID:",
        telegramId,
      );
      const userUuid = await UserService.getUserUuidByTelegramId(telegramId);
      console.warn("üîç [confirmTournament] UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userUuid);

      // –ï—Å–ª–∏ UUID –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID - API —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ getUserOrCreate
      const finalUserId = userUuid || telegramId;
      console.warn(
        "üîç [confirmTournament] –§–∏–Ω–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:",
        finalUserId,
      );

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–ª–æ—â–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –∏–∑ OCR
      console.warn(
        "üîç [confirmTournament] –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–ª–æ—â–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        telegramId,
      );
      const currentVenue =
        await UserSettingsService.getCurrentVenue(telegramId);
      console.warn(
        "üè® [confirmTournament] –¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        currentVenue,
      );
      console.warn("üè® [confirmTournament] –ü–ª–æ—â–∞–¥–∫–∞ –∏–∑ OCR:", data.venue);
      const venue = currentVenue || data.venue || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
      console.warn(
        "üè® [confirmTournament] –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:",
        venue,
      );

      const tournamentData = {
        userId: finalUserId,
        name: data.name || "–¢—É—Ä–Ω–∏—Ä –∏–∑ –±–∏–ª–µ—Ç–∞",
        date: data.date || new Date().toISOString(),
        buyin: data.buyin || 0,
        venue: venue,
        tournamentType: data.tournamentType || "freezeout",
        structure: data.structure || "NL Hold'em",
        participants: data.participants,
        prizePool: data.prizePool,
        blindLevels: data.blindLevels,
        startingStack: data.startingStack,
        notes: "–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –≤ Telegram –±–æ—Ç–µ",
      };

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const appUrl =
        process.env.NEXT_PUBLIC_APP_URL ||
        process.env.VERCEL_URL ||
        "http://localhost:3000";
      const apiUrl = appUrl.startsWith("http") ? appUrl : `https://${appUrl}`;
      const apiEndpoint = `${apiUrl}/api/tournaments`;

      console.warn(
        `üåê [confirmTournament] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: ${apiEndpoint}`,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 —Å–µ–∫—É–Ω–¥ timeout

      const apiResponse = await fetch(apiEndpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(tournamentData),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!apiResponse.ok) {
        const errorText = await apiResponse.text().catch(() => "Unknown error");
        console.error(`‚ùå API error: ${apiResponse.status} - ${errorText}`);
        throw new Error(`API error: ${apiResponse.status} - ${errorText}`);
      }

      const apiResult = await apiResponse.json();
      if (!apiResult.success) {
        console.error("‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:", apiResult);
        throw new Error(
          apiResult.error || "Failed to create tournament via API",
        );
      }

      const newTournament = apiResult.tournament;

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ OCR –∏–∑ —Å–µ—Å—Å–∏–∏
      ctx.session.ocrData = undefined;

      const successMessage = `
‚úÖ **–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

üé∞ **${newTournament.name}**
üìÖ ${new Date(newTournament.date).toLocaleDateString("ru-RU")}
üíµ –ë–∞–π-–∏–Ω: $${newTournament.buyin}
üè® ${newTournament.venue}

ID —Ç—É—Ä–Ω–∏—Ä–∞: \`${newTournament.id}\`

üéØ **–ß—Ç–æ –¥–∞–ª—å—à–µ?**
‚Ä¢ –ü–æ—Å–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /result –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /stats
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ /settings

–£–¥–∞—á–∏ –∑–∞ —Å—Ç–æ–ª–∞–º–∏! üçÄ
      `;

      await ctx.editMessageText(successMessage, {
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: [] },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:", error);

      let errorMessage = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞.\n\n";

      if (error instanceof Error) {
        if (error.message.includes("API error: 401")) {
          errorMessage +=
            "üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link";
        } else if (error.message.includes("API error: 500")) {
          errorMessage += "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        } else if (
          error.message.includes("AbortError") ||
          error.message.includes("timeout")
        ) {
          errorMessage +=
            "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.";
        } else if (error.message.includes("fetch")) {
          errorMessage +=
            "üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.";
        } else {
          errorMessage += `üêõ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
        }
      }

      errorMessage += "\n\nüí° **–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n";
      errorMessage += "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n";
      errorMessage += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /register –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞\n";
      errorMessage += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è";

      await ctx.reply(errorMessage, { parse_mode: "Markdown" });
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
   */
  async cancelTournament(ctx: BotContext) {
    await ctx.answerCbQuery();

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ OCR –∏–∑ —Å–µ—Å—Å–∏–∏
    ctx.session.ocrData = undefined;

    await ctx.editMessageText(
      "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n" +
        "–í—ã –º–æ–∂–µ—Ç–µ:\n" +
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞\n" +
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /register –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞",
      { reply_markup: { inline_keyboard: [] } },
    );
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
   */
  async editTournament(ctx: BotContext) {
    await ctx.answerCbQuery();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    const data = ctx.session.ocrData;
    if (!data) {
      await ctx.reply(
        "‚ùå –î–∞–Ω–Ω—ã–µ OCR –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.",
      );
      return;
    }

    ctx.session.currentAction = "edit_tournament";
    ctx.session.tournamentData = data;

    const editMessage = `
‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞**

–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
üé∞ –¢—É—Ä–Ω–∏—Ä: ${data.name || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}
üìÖ –î–∞—Ç–∞: ${data.date ? new Date(data.date).toLocaleDateString("ru-RU") : "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"}
üíµ –ë–∞–π-–∏–Ω: $${data.buyin || 0}
üè® –ü–ª–æ—â–∞–¥–∫–∞: ${data.venue || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}

–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–ø–æ–ª–µ:–∑–Ω–∞—á–µ–Ω–∏–µ\`

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:**
‚Ä¢ \`name:–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\`
‚Ä¢ \`date:15.12.2024\`
‚Ä¢ \`buyin:500\`
‚Ä¢ \`venue:–ù–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞\`

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ \`done\`
–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ \`cancel\`
    `;

    await ctx.editMessageText(editMessage, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: [] },
    });
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–∏–ª–µ—Ç–∞
   */
  private validateTicketPhoto(fileSize: number, fileId: string): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª–µ–µ 20MB)
    if (fileSize > 20 * 1024 * 1024) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ file_id
    if (!fileId || fileId.length === 0) {
      return false;
    }

    return true;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
   */
  private async getPhotoMetadata(ctx: BotContext, fileId: string) {
    try {
      const file = await ctx.telegram.getFile(fileId);
      return {
        size: file.file_size || 0,
        path: file.file_path || "",
        uniqueId: file.file_unique_id,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ:", error);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
   */
  private async savePhotoToHistory(
    tournamentId: string,
    fileId: string,
    ocrData: any,
  ) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.warn(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, {
      fileId,
      ocrData,
      timestamp: new Date().toISOString(),
    });
  }
}
