import type { TournamentFormData } from "@/types";

export interface OCRResult {
  success: boolean;
  data?: Partial<TournamentFormData>;
  error?: string;
  confidence?: number;
}

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∏–ª–µ—Ç–æ–≤
const mockTicketPatterns = [
  {
    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è RPF –±–∏–ª–µ—Ç–æ–≤ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
    pattern: /RPF|RUSSIAN POKER|SOCHI|CASINO/i,
    data: {
      name: "RUSSIAN POKER OPEN Day 1",
      venue: "Casino Sochi 2025",
      buyin: 275,
      startingStack: 25000,
      tournamentType: "freezeout",
      structure: "NL Hold'em",
    },
  },
  {
    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è PokerStars –±–∏–ª–µ—Ç–æ–≤
    pattern: /POKERSTARS|STARS|EPT|WSOP/i,
    data: {
      name: "PokerStars Sunday Million",
      venue: "PokerStars Online",
      buyin: 109,
      startingStack: 10000,
      tournamentType: "freezeout",
      structure: "NL Hold'em",
    },
  },
  {
    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
    pattern: /CASINO|POKER CLUB|LIVE/i,
    data: {
      name: "Weekly Tournament",
      venue: "Local Casino",
      buyin: 100,
      startingStack: 20000,
      tournamentType: "rebuy",
      structure: "NL Hold'em",
    },
  },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ –±–∏–ª–µ—Ç–∞
function extractTournamentData(text: string): Partial<TournamentFormData> {
  const data: Partial<TournamentFormData> = {};

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
  const eventMatch = text.match(/EVENT[#:\s]*(\d+)?\s*([^\\n]+)/i);
  if (eventMatch) {
    data.name = eventMatch[2]?.trim();
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã
  const dateMatches = [
    text.match(/(\d{1,2}[.\-/]\d{1,2}[.\-/]\d{4})/),
    text.match(/(\d{4}[.\-/]\d{1,2}[.\-/]\d{1,2})/),
    text.match(/DATE[:\s]*(\d{1,2}[.\-/]\d{1,2}[.\-/]\d{4})/i),
  ];

  for (const match of dateMatches) {
    if (match) {
      const dateStr = match[1].replace(/\./g, "-").replace(/\//g, "-");
      const [day, month, year] = dateStr.split("-");
      if (year && month && day) {
        data.date = `${year}-${month.padStart(2, "0")}-${day.padStart(2, "0")}T18:00`;
        break;
      }
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
  const venueMatches = [
    text.match(/CASINO\s+([^\\n]+)/i),
    text.match(/([A-Z\s]+CASINO[A-Z\s]*)/i),
    text.match(/VENUE[:\s]*([^\\n]+)/i),
  ];

  for (const match of venueMatches) {
    if (match) {
      data.venue = match[1]?.trim();
      break;
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–π-–∏–Ω–∞
  const buyinMatches = [
    text.match(/BUYIN[:\s]*(\d+)/i),
    text.match(/AMOUNT[:\s]*(\d+)/i),
    text.match(/BUY[-\s]*IN[:\s]*(\d+)/i),
  ];

  for (const match of buyinMatches) {
    if (match) {
      data.buyin = parseInt(match[1]);
      break;
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ fee –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –±–∞–π-–∏–Ω—É
  const feeMatch = text.match(/FEE[:\s]*(\d+)/i);
  if (feeMatch && data.buyin) {
    data.buyin += parseInt(feeMatch[1]);
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å—Ç–µ–∫–∞
  const chipsMatch = text.match(/CHIPS[:\s]*(\d+)/i);
  if (chipsMatch) {
    data.startingStack = parseInt(chipsMatch[1]);
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  const nameText = data.name?.toLowerCase() || "";
  if (nameText.includes("rebuy")) {
    data.tournamentType = "rebuy";
  } else if (nameText.includes("bounty")) {
    data.tournamentType = "bounty";
  } else if (nameText.includes("satellite")) {
    data.tournamentType = "satellite";
  } else {
    data.tournamentType = "freezeout";
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (!data.structure) {
    data.structure = "NL Hold'em";
  }

  return data;
}

// –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è OCR —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
export async function processTicketImage(
  file: File | string,
): Promise<OCRResult> {
  return new Promise((resolve) => {
    // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    setTimeout(
      () => {
        try {
          // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
          console.log(
            "üîç OCR: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            typeof file === "string" ? file : file.name,
          );

          // –ú–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ Tesseract.js –∏–ª–∏ Google Cloud Vision API
          const mockExtractedText = `
          RPF SUMMER18-31 AUGUST 2025
          CASINO SOCHI 2025
          
          EVENT#8 RUSSIAN POKER OPEN Day 1
          AMOUNT: 275    CHIPS: 25000
          BUYIN: 250    FEE: 25    KO: 0
          
          Sales time: 21.08.2025 17:41:06
          
          FIRSTNAME: VALOV
          LASTNAME: MAKSIM
          COUNTRY: Russia
          ID: 149074
          
          TICKET NO.    TABLE/SEAT
          187    18  10
          
          DATE: 21.08.2025
          Sochi Casino Poker
        `;

          // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
          const extractedData = extractTournamentData(mockExtractedText);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
          let bestMatch = null;
          let highestConfidence = 0;

          for (const pattern of mockTicketPatterns) {
            if (pattern.pattern.test(mockExtractedText)) {
              const confidence = 0.85 + Math.random() * 0.1; // 85-95%
              if (confidence > highestConfidence) {
                highestConfidence = confidence;
                bestMatch = pattern;
              }
            }
          }

          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
          const finalData = bestMatch
            ? { ...bestMatch.data, ...extractedData }
            : extractedData;

          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞
          if (!finalData.date) {
            const now = new Date();
            finalData.date = now.toISOString().slice(0, 16); // YYYY-MM-DDTHH:MM
          }

          resolve({
            success: true,
            data: finalData,
            confidence: highestConfidence || 0.8,
          });
        } catch (error) {
          resolve({
            success: false,
            error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
          });
        }
      },
      2000 + Math.random() * 1000,
    ); // 2-3 —Å–µ–∫—É–Ω–¥—ã
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export function validateOCRData(data: Partial<TournamentFormData>): {
  isValid: boolean;
  errors: string[];
  warnings: string[];
} {
  const errors: string[] = [];
  const warnings: string[] = [];

  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (!data.name || data.name.trim().length === 0) {
    errors.push("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞");
  }

  if (!data.buyin || data.buyin <= 0) {
    errors.push("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–π-–∏–Ω");
  }

  if (!data.date) {
    errors.push("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞");
  }

  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  if (!data.venue || data.venue.trim().length === 0) {
    warnings.push("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ");
  }

  if (!data.startingStack || data.startingStack <= 0) {
    warnings.push("–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ç–µ–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
  }

  if (data.buyin && (data.buyin < 1 || data.buyin > 100000)) {
    warnings.push("–ù–µ–æ–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞–π-–∏–Ω–∞");
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ OCR
export function preprocessImage(file: File): Promise<File> {
  return new Promise((resolve) => {
    // –ú–æ–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Canvas API
    setTimeout(() => {
      resolve(file);
    }, 500);
  });
}

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OCR
export interface OCRConfig {
  language: string;
  confidence: number;
  preprocessing: boolean;
  autoRotate: boolean;
}

export const defaultOCRConfig: OCRConfig = {
  language: "eng+rus",
  confidence: 0.7,
  preprocessing: true,
  autoRotate: true,
};
