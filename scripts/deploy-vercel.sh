#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–∞ Vercel
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è PokerTracker Pro

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Vercel CLI
    if ! command -v vercel &> /dev/null; then
        warning "Vercel CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        npm install -g vercel
        success "Vercel CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        success "Vercel CLI –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º jq
    if ! command -v jq &> /dev/null; then
        error "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install jq"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º curl
    if ! command -v curl &> /dev/null; then
        error "curl –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
}

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
pre_deploy_checks() {
    info "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -f "package.json" ]; then
        error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Git —Å—Ç–∞—Ç—É—Å
    if [ -n "$(git status --porcelain)" ]; then
        warning "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —á–∏—Å—Ç–∞—è"
        read -p "–ö–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git add .
            git commit -m "Pre-deploy commit $(date)"
            git push origin main
            success "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub"
        else
            error "–ö–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º"
            exit 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä—ã–µ)
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    if npm test -- src/__tests__/integration/auth-integration.test.ts --silent; then
        success "–ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç"
    else
        error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç!"
        exit 1
    fi
}

# –õ–æ–≥–∏–Ω –≤ Vercel
vercel_login() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Vercel..."
    
    if vercel whoami > /dev/null 2>&1; then
        local user=$(vercel whoami)
        success "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: $user"
    else
        info "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Vercel..."
        vercel login
        success "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Vercel
setup_vercel_project() {
    info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vercel –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
    if [ -f ".vercel/project.json" ]; then
        success "Vercel –ø—Ä–æ–µ–∫—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        return 0
    fi
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ Vercel –ø—Ä–æ–µ–∫—Ç–∞..."
    vercel --yes
    
    success "Vercel –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment_variables() {
    local env_type=$1
    
    info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è $env_type..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.example
    if [ ! -f ".env.example" ]; then
        error ".env.example –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    warning "–í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel Dashboard:"
    warning "https://vercel.com/dashboard ‚Üí Settings ‚Üí Environment Variables"
    echo
    
    info "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.example:"
    grep -E "^[^#].*=" .env.example | head -10
    echo
    
    read -p "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Vercel Dashboard? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        warning "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
        exit 1
    fi
}

# –î–µ–ø–ª–æ–π –≤ preview (staging)
deploy_preview() {
    info "–î–µ–ø–ª–æ–π –≤ preview (staging)..."
    
    vercel --yes
    
    local preview_url=$(vercel ls | grep "https://" | head -1 | awk '{print $2}')
    
    if [ -n "$preview_url" ]; then
        success "Preview –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω: $preview_url"
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
        if curl -s "$preview_url" > /dev/null; then
            success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        else
            warning "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
        fi
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL preview –¥–µ–ø–ª–æ—è"
    fi
}

# –î–µ–ø–ª–æ–π –≤ production
deploy_production() {
    local version=$1
    
    if [ -z "$version" ]; then
        version=$(jq -r '.version' VERSION.json 2>/dev/null || echo "1.0.0")
    fi
    
    warning "üö® –î–ï–ü–õ–û–ô –í PRODUCTION!"
    warning "–í–µ—Ä—Å–∏—è: $version"
    warning "–≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –∂–∏–≤—É—é —Å–∏—Å—Ç–µ–º—É!"
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å production –¥–µ–ø–ª–æ–π? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "Production –¥–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω"
        return 0
    fi
    
    info "–î–µ–ø–ª–æ–π –≤ production..."
    
    # Production –¥–µ–ø–ª–æ–π
    vercel --prod --yes
    
    local prod_url=$(vercel ls --prod | grep "https://" | head -1 | awk '{print $2}')
    
    if [ -n "$prod_url" ]; then
        success "üéâ Production –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
        success "üåê URL: $prod_url"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        info "–ü—Ä–æ–≤–µ—Ä–∫–∞ production –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        sleep 5 # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        if curl -s "$prod_url" > /dev/null; then
            success "‚úÖ Production –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        else
            error "‚ùå Production –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook
        setup_telegram_webhook "$prod_url"
        
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å production URL"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook
setup_telegram_webhook() {
    local app_url=$1
    
    info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook..."
    
    if [ -z "$TELEGRAM_BOT_TOKEN" ]; then
        warning "TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏"
        read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: " bot_token
    else
        bot_token=$TELEGRAM_BOT_TOKEN
    fi
    
    if [ -n "$bot_token" ]; then
        local webhook_url="$app_url/api/bot/webhook"
        
        info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: $webhook_url"
        
        local response=$(curl -s -X POST "https://api.telegram.org/bot$bot_token/setWebhook" \
          -H "Content-Type: application/json" \
          -d "{
            \"url\": \"$webhook_url\",
            \"allowed_updates\": [\"message\", \"callback_query\"]
          }")
        
        if echo "$response" | jq -r '.ok' | grep -q "true"; then
            success "‚úÖ Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
            info "–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook..."
            local webhook_info=$(curl -s "https://api.telegram.org/bot$bot_token/getWebhookInfo")
            echo "$webhook_info" | jq -r '.result.url'
            
        else
            error "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:"
            echo "$response" | jq -r '.description'
        fi
    else
        warning "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Telegram webhook"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è
verify_deployment() {
    local app_url=$1
    
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    local checks=(
        "$app_url"
        "$app_url/api/tournaments"
        "$app_url/auth"
        "$app_url/admin"
    )
    
    for url in "${checks[@]}"; do
        if curl -s "$url" > /dev/null; then
            success "‚úÖ $url –æ—Ç–≤–µ—á–∞–µ—Ç"
        else
            error "‚ùå $url –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
    done
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command=$1
    local version=$2
    
    echo "üöÄ PokerTracker Pro - Vercel Deployment"
    echo "–í–µ—Ä—Å–∏—è: $(jq -r '.version' VERSION.json 2>/dev/null || echo 'unknown')"
    echo
    
    case "$command" in
        "setup")
            check_dependencies
            vercel_login
            setup_vercel_project
            setup_environment_variables "production"
            success "üéâ Vercel –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/deploy-vercel.sh preview"
            ;;
        "preview"|"staging")
            check_dependencies
            pre_deploy_checks
            vercel_login
            deploy_preview
            ;;
        "production"|"prod")
            check_dependencies
            pre_deploy_checks
            vercel_login
            deploy_production "$version"
            ;;
        "webhook")
            if [ -n "$2" ]; then
                setup_telegram_webhook "$2"
            else
                error "–£–∫–∞–∂–∏—Ç–µ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ./scripts/deploy-vercel.sh webhook https://your-app.vercel.app"
            fi
            ;;
        "verify")
            if [ -n "$2" ]; then
                verify_deployment "$2"
            else
                error "–£–∫–∞–∂–∏—Ç–µ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ./scripts/deploy-vercel.sh verify https://your-app.vercel.app"
            fi
            ;;
        "status")
            vercel_login
            vercel ls
            ;;
        "logs")
            vercel_login
            vercel logs
            ;;
        "help"|"")
            echo "üöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Vercel:"
            echo
            echo "  setup                    - –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Vercel –ø—Ä–æ–µ–∫—Ç–∞"
            echo "  preview                  - –î–µ–ø–ª–æ–π –≤ preview (staging)"
            echo "  production [version]     - –î–µ–ø–ª–æ–π –≤ production"
            echo "  webhook <url>            - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook"
            echo "  verify <url>             - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            echo "  status                   - –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞"
            echo "  logs                     - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
            echo "  help                     - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            echo
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  ./scripts/deploy-vercel.sh setup"
            echo "  ./scripts/deploy-vercel.sh preview"
            echo "  ./scripts/deploy-vercel.sh production 1.0.0"
            echo "  ./scripts/deploy-vercel.sh webhook https://your-app.vercel.app"
            echo
            echo "üìö –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: VERCEL_DEPLOYMENT.md"
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./scripts/deploy-vercel.sh help"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
