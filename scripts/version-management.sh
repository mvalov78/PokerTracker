#!/bin/bash

# üè∑Ô∏è –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ PokerTracker Pro
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/version-management.sh [command] [version]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "package.json" ]; then
    error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è package.json)"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞
create_release() {
    local version=$1
    local message=$2
    
    if [ -z "$version" ]; then
        error "–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é: ./scripts/version-management.sh release 1.0.1"
        exit 1
    fi
    
    if [ -z "$message" ]; then
        message="Release version $version"
    fi
    
    info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–∏ $version..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è
    if [ -n "$(git status --porcelain)" ]; then
        warning "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —á–∏—Å—Ç–∞—è. –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
        git add .
        git commit -m "Prepare for release $version"
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º VERSION.json
    info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VERSION.json..."
    temp_file=$(mktemp)
    jq --arg version "$version" --arg date "$(date -u +%Y-%m-%d)" \
       '.version = $version | .releaseDate = $date' VERSION.json > "$temp_file"
    mv "$temp_file" VERSION.json
    
    # –û–±–Ω–æ–≤–ª—è–µ–º package.json
    info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json..."
    npm version "$version" --no-git-tag-version
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
    git add VERSION.json package.json
    git commit -m "üè∑Ô∏è Bump version to $version"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
    info "–°–æ–∑–¥–∞–Ω–∏–µ Git —Ç–µ–≥–∞ v$version..."
    git tag -a "v$version" -m "$message"
    
    success "–†–µ–ª–∏–∑ v$version —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
    info "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ remote: git push origin main --tags"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
rollback() {
    local target_version=$1
    
    if [ -z "$target_version" ]; then
        error "–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞: ./scripts/version-management.sh rollback 1.0.0"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥
    if ! git rev-parse "v$target_version" >/dev/null 2>&1; then
        error "–¢–µ–≥ v$target_version –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        exit 1
    fi
    
    warning "–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏ $target_version"
    warning "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–∏—Ç –∫–æ–¥ –∏ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "–û—Ç–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω"
        exit 0
    fi
    
    info "–°–æ–∑–¥–∞–Ω–∏–µ backup –≤–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º..."
    backup_branch="backup-$(date +%Y%m%d-%H%M%S)"
    git checkout -b "$backup_branch"
    git checkout main
    
    info "–û—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏ v$target_version..."
    git reset --hard "v$target_version"
    
    success "–û—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏ $target_version –∑–∞–≤–µ—Ä—à–µ–Ω!"
    success "Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–µ—Ç–∫–µ: $backup_branch"
    warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π
list_versions() {
    info "–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–ª–∏–∑–æ–≤:"
    git tag -l "v*" --sort=-version:refname | head -10 | while read tag; do
        commit_date=$(git log -1 --format=%ai "$tag")
        commit_message=$(git tag -l --format='%(contents)' "$tag")
        echo -e "${GREEN}$tag${NC} - $commit_date"
        echo "  üìù $commit_message"
        echo
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
compare_versions() {
    local version1=$1
    local version2=$2
    
    if [ -z "$version1" ] || [ -z "$version2" ]; then
        error "–£–∫–∞–∂–∏—Ç–µ –¥–≤–µ –≤–µ—Ä—Å–∏–∏: ./scripts/version-management.sh compare 1.0.0 1.0.1"
        exit 1
    fi
    
    info "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π v$version1 –∏ v$version2:"
    git diff "v$version1" "v$version2" --stat
    
    echo
    info "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    git log "v$version1..v$version2" --oneline
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è hotfix
create_hotfix() {
    local version=$1
    local issue=$2
    
    if [ -z "$version" ] || [ -z "$issue" ]; then
        error "–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ: ./scripts/version-management.sh hotfix 1.0.1 'Fix critical bug'"
        exit 1
    fi
    
    info "–°–æ–∑–¥–∞–Ω–∏–µ hotfix –≤–µ—Ä—Å–∏–∏ $version..."
    
    # –°–æ–∑–¥–∞–µ–º hotfix –≤–µ—Ç–∫—É –æ—Ç main
    hotfix_branch="hotfix/$version"
    git checkout main
    git checkout -b "$hotfix_branch"
    
    info "–í–µ—Ç–∫–∞ $hotfix_branch —Å–æ–∑–¥–∞–Ω–∞"
    info "–í–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:"
    info "  ./scripts/version-management.sh release $version '$issue'"
    info "  git checkout main && git merge $hotfix_branch"
    info "  git branch -d $hotfix_branch"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É
check_release_readiness() {
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É..."
    
    local issues=0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç—ã
    info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    if npm test > /dev/null 2>&1; then
        success "–¢–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç"
    else
        error "–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç!"
        ((issues++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏..."
    if npm run build > /dev/null 2>&1; then
        success "–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞"
    else
        error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏!"
        ((issues++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    if [ -f ".env.example" ]; then
        success ".env.example –Ω–∞–π–¥–µ–Ω"
    else
        warning ".env.example –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        ((issues++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
    required_docs=("README.md" "CHANGELOG.md" "VERSION.json")
    for doc in "${required_docs[@]}"; do
        if [ -f "$doc" ]; then
            success "$doc –Ω–∞–π–¥–µ–Ω"
        else
            error "$doc –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
            ((issues++))
        fi
    done
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if [ $issues -eq 0 ]; then
        success "üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–µ–ª–∏–∑—É!"
        return 0
    else
        error "‚ùå –ù–∞–π–¥–µ–Ω–æ $issues –ø—Ä–æ–±–ª–µ–º. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º."
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backup_database() {
    info "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    backup_dir="backups/$(date +%Y-%m-%d)"
    mkdir -p "$backup_dir"
    
    # –°–æ–∑–¥–∞–µ–º SQL –¥–∞–º–ø (–ø—Å–µ–≤–¥–æ–∫–æ–¥ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase)
    backup_file="$backup_dir/database-backup-$(date +%Y%m%d-%H%M%S).sql"
    
    info "–ë—ç–∫–∞–ø –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $backup_file"
    warning "–í–ê–ñ–ù–û: –î–ª—è Supabase –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Dashboard -> Settings -> Database -> Backup"
    warning "–ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –≤ Supabase"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ –±—ç–∫–∞–ø–µ
    cat > "$backup_dir/backup-info.json" << EOF
{
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "version": "$(jq -r '.version' VERSION.json)",
  "environment": "production",
  "type": "pre-deployment",
  "note": "Backup created before deployment"
}
EOF
    
    success "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $backup_dir/backup-info.json"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command=$1
    
    case "$command" in
        "release")
            create_release "$2" "$3"
            ;;
        "rollback") 
            rollback "$2"
            ;;
        "list"|"versions")
            list_versions
            ;;
        "compare")
            compare_versions "$2" "$3"
            ;;
        "hotfix")
            create_hotfix "$2" "$3"
            ;;
        "check"|"ready")
            check_release_readiness
            ;;
        "backup")
            backup_database
            ;;
        "help"|"")
            echo "üè∑Ô∏è PokerTracker Pro - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏"
            echo
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  release <version> [message]  - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑"
            echo "  rollback <version>          - –û—Ç–∫–∞—Ç–∏—Ç—å—Å—è –∫ –≤–µ—Ä—Å–∏–∏"  
            echo "  list                        - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π"
            echo "  compare <v1> <v2>           - –°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–µ –≤–µ—Ä—Å–∏–∏"
            echo "  hotfix <version> <issue>    - –°–æ–∑–¥–∞—Ç—å hotfix"
            echo "  check                       - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–µ–ª–∏–∑—É"
            echo "  backup                      - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î"
            echo "  help                        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  ./scripts/version-management.sh release 1.0.1"
            echo "  ./scripts/version-management.sh rollback 1.0.0"
            echo "  ./scripts/version-management.sh compare 1.0.0 1.0.1"
            echo "  ./scripts/version-management.sh hotfix 1.0.1 'Fix critical auth bug'"
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./scripts/version-management.sh help"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
